import { GetAccountBalanceRequest, GetAccountBalanceResponse, GetBlockStreamRequest, GetBlockStreamResponse, GetKlineRequest, GetKlineResponse, GetMarketDepthRequest, GetMarketDepthResponse, GetMarketDepthsStreamResponse, GetMarketsRequest, GetMarketsResponse, GetOpenOrdersRequest, GetOpenOrdersResponse, GetOrderbookRequest, GetOrderbookResponse, GetOrderbooksRequest, GetOrderbooksStreamResponse, GetOrderByIDRequest, GetOrderByIDResponse, GetOrdersRequest, GetOrdersResponse, GetOrderStatusStreamRequest, GetOrderStatusStreamResponse, GetPoolReservesStreamRequest, GetPoolReservesStreamResponse, GetPoolsRequest, GetPoolsResponse, GetPriceRequest, GetPriceResponse, GetPricesStreamRequest, GetPricesStreamResponse, GetQuotesRequest, GetQuotesResponse, GetQuotesStreamRequest, GetQuotesStreamResponse, GetRecentBlockHashRequest, GetRecentBlockHashResponse, GetServerTimeRequest, GetServerTimeResponse, GetSwapsStreamRequest, GetSwapsStreamResponse, GetTickersRequest, GetTickersResponse, GetTickersStreamResponse, GetTradesRequest, GetTradesResponse, GetTradesStreamResponse, GetUnsettledRequest, GetUnsettledResponse, PostCancelAllRequest, PostCancelAllResponse, PostCancelByClientOrderIDRequest, PostCancelOrderRequest, PostCancelOrderResponse, PostOrderRequest, PostOrderResponse, PostReplaceOrderRequest, PostSettleRequest, PostSettleResponse, PostSubmitBatchRequest, PostSubmitBatchResponse, PostSubmitRequest, PostSubmitResponse, RouteTradeSwapRequest, SubmitStrategy, TradeSwapRequest, TradeSwapResponse, TransactionMessage, GetTokenAccountsResponse, GetTokenAccountsRequest, PostRaydiumSwapRequest, PostRaydiumSwapResponse, PostRaydiumRouteSwapRequest, PostRaydiumRouteSwapResponse, PostJupiterSwapRequest, PostJupiterSwapResponse, PostJupiterRouteSwapRequest, PostJupiterRouteSwapResponse, GetRaydiumQuotesRequest, GetRaydiumQuotesResponse, GetRaydiumPricesRequest, GetRaydiumPricesResponse, GetMarketDepthRequestV2, GetMarketDepthResponseV2, GetMarketsRequestV2, GetMarketsResponseV2, GetOpenOrdersRequestV2, GetOrderbookRequestV2, GetOrderbookResponseV2, PostReplaceOrderRequestV2, PostSettleRequestV2, GetRaydiumPoolsRequest, GetRaydiumPoolsResponse, GetJupiterQuotesRequest, GetJupiterQuotesResponse, GetJupiterPricesRequest, GetJupiterPricesResponse, GetTickersRequestV2, GetTickersResponseV2, GetUnsettledRequestV2, PostCancelOrderRequestV2, PostCancelOrderResponseV2, PostOrderRequestV2, GetOpenOrdersResponseV2, GetNewRaydiumPoolsRequest, GetNewRaydiumPoolsResponse, GetTransactionRequest, GetTransactionResponse, GetRateLimitRequest, GetRateLimitResponse, GetPriorityFeeRequest, GetPriorityFeeResponse, PostJupiterSwapInstructionsRequest, PostJupiterSwapInstructionsResponse, GetTickersStreamRequest, GetRaydiumPoolReserveRequest, GetRaydiumPoolReserveResponse, GetBundleTipRequest, GetBundleTipResponse, PostRaydiumSwapInstructionsRequest, PostRaydiumSwapInstructionsResponse, GetPumpFunNewTokensStreamRequest, GetPumpFunNewTokensStreamResponse, GetPumpFunSwapsStreamRequest, GetPumpFunSwapsStreamResponse, PostZetaCrossMarginAccountRequest, PostZetaCrossMarginAccountResponse, GetZetaTransactionStreamResponse, PostPumpFunSwapRequest, PostPumpFunSwapResponse, GetPumpFunQuotesRequest, GetPumpFunQuotesResponse, GetRecentBlockHashRequestV2, GetRecentBlockHashResponseV2, GetRaydiumCPMMQuotesRequest, GetPumpFunAMMSwapStreamRequest, GetPumpFunAMMSwapStreamResponse, GetRaydiumCPMMQuotesResponse, GetRaydiumCLMMQuotesResponse, GetRaydiumCLMMQuotesRequest, PostRaydiumCPMMSwapResponse, PostRaydiumCPMMSwapRequest, PostPumpFunSwapRequestSol, GetNewRaydiumPoolsByTransactionRequest, GetPriorityFeeByProgramRequest, GetPriorityFeeByProgramResponse, GetNewRaydiumPoolsByTransactionResponse, GetRaydiumCLMMPoolsResponse, PostSubmitSnipeRequest, PostSubmitSnipeResponse, PostSubmitPaladinRequest, GetLeaderScheduleResponse, GetLeaderScheduleRequest, TransactionMessageV2, GetPumpFunNewAmmPoolStreamRequest, GetPumpFunNewAmmPoolStreamResponse } from "../proto/messages/api/index";
import { Api } from "../proto/services/api/index";
import { SubmitTransactionResponse } from "../utils/transaction";
import { Keypair } from "@solana/web3.js";
import { RpcReturnType } from "../proto/runtime/rpc";
import { Type as GetZetaTransactionStreamRequest } from "../proto/messages/api/GetZetaTransactionStreamRequest";
export declare abstract class BaseProvider implements Api {
    protected privateKey?: Keypair;
    protected authHeader: string;
    protected constructor(authHeader: string, privateKey?: string);
    getMarketsV2(request: GetMarketsRequestV2): RpcReturnType<Promise<GetMarketsResponseV2>, []>;
    getRateLimit(request: GetRateLimitRequest): RpcReturnType<Promise<GetRateLimitResponse>, []>;
    getTransaction(request: GetTransactionRequest): RpcReturnType<Promise<GetTransactionResponse>, []>;
    getJupiterPrices(request: GetJupiterPricesRequest): RpcReturnType<Promise<GetJupiterPricesResponse>, []>;
    getJupiterQuotes(request: GetJupiterQuotesRequest): RpcReturnType<Promise<GetJupiterQuotesResponse>, []>;
    getMarketDepthV2(request: GetMarketDepthRequestV2): RpcReturnType<Promise<GetMarketDepthResponseV2>, []>;
    getOpenOrdersV2(request: GetOpenOrdersRequestV2): RpcReturnType<Promise<GetOpenOrdersResponseV2>, []>;
    getOrderbookV2(request: GetOrderbookRequestV2): RpcReturnType<Promise<GetOrderbookResponseV2>, []>;
    getRaydiumPoolReserve(request: GetRaydiumPoolReserveRequest): RpcReturnType<Promise<GetRaydiumPoolReserveResponse>, []>;
    getRaydiumPools(request: GetRaydiumPoolsRequest): RpcReturnType<Promise<GetRaydiumPoolsResponse>, []>;
    getRaydiumCLMMPools(request: GetRaydiumPoolsRequest): RpcReturnType<Promise<GetRaydiumCLMMPoolsResponse>, []>;
    getRaydiumPrices(request: GetRaydiumPricesRequest): RpcReturnType<Promise<GetRaydiumPricesResponse>, []>;
    getRaydiumQuotes(request: GetRaydiumQuotesRequest): RpcReturnType<Promise<GetRaydiumQuotesResponse>, []>;
    getRaydiumCPMMQuotes(request: GetRaydiumCPMMQuotesRequest): RpcReturnType<Promise<GetRaydiumCPMMQuotesResponse>, []>;
    getRaydiumCLMMQuotes(request: GetRaydiumCLMMQuotesRequest): RpcReturnType<Promise<GetRaydiumCLMMQuotesResponse>, []>;
    getPumpFunQuotes(request: GetPumpFunQuotesRequest): RpcReturnType<Promise<GetPumpFunQuotesResponse>, []>;
    getTickersV2(request: GetTickersRequestV2): RpcReturnType<Promise<GetTickersResponseV2>, []>;
    getUnsettledV2(request: GetUnsettledRequestV2): RpcReturnType<Promise<GetUnsettledResponse>, []>;
    postCancelOrderV2(request: PostCancelOrderRequestV2): RpcReturnType<Promise<PostCancelOrderResponseV2>, []>;
    postJupiterRouteSwap(request: PostJupiterRouteSwapRequest): RpcReturnType<Promise<PostJupiterRouteSwapResponse>, []>;
    postJupiterSwap(request: PostJupiterSwapRequest): RpcReturnType<Promise<PostJupiterSwapResponse>, []>;
    postJupiterSwapInstructions(request: PostJupiterSwapInstructionsRequest): RpcReturnType<Promise<PostJupiterSwapInstructionsResponse>, []>;
    postOrderV2(request: PostOrderRequestV2): RpcReturnType<Promise<PostOrderResponse>, []>;
    postRaydiumRouteSwap(request: PostRaydiumRouteSwapRequest): RpcReturnType<Promise<PostRaydiumRouteSwapResponse>, []>;
    postRaydiumCLMMRouteSwap(request: PostRaydiumRouteSwapRequest): RpcReturnType<Promise<PostRaydiumRouteSwapResponse>, []>;
    postRaydiumSwap(request: PostRaydiumSwapRequest): RpcReturnType<Promise<PostRaydiumSwapResponse>, []>;
    postRaydiumCPMMSwap(request: PostRaydiumCPMMSwapRequest): RpcReturnType<Promise<PostRaydiumCPMMSwapResponse>, []>;
    postRaydiumCLMMSwap(request: PostRaydiumSwapRequest): RpcReturnType<Promise<PostRaydiumSwapResponse>, []>;
    postPumpFunSwap(request: PostPumpFunSwapRequest): RpcReturnType<Promise<PostPumpFunSwapResponse>, []>;
    postPumpFunSwapSol(request: PostPumpFunSwapRequestSol): RpcReturnType<Promise<PostPumpFunSwapResponse>, []>;
    postRaydiumSwapInstructions(request: PostRaydiumSwapInstructionsRequest): RpcReturnType<Promise<PostRaydiumSwapInstructionsResponse>, []>;
    postReplaceOrderV2(request: PostReplaceOrderRequestV2): RpcReturnType<Promise<PostOrderResponse>, []>;
    postSettleV2(request: PostSettleRequestV2): RpcReturnType<Promise<PostSettleResponse>, []>;
    getTokenAccounts(request: GetTokenAccountsRequest): RpcReturnType<Promise<GetTokenAccountsResponse>, []>;
    abstract close(): void;
    getMarkets(request: GetMarketsRequest): Promise<GetMarketsResponse>;
    getTickers(request: GetTickersRequest): Promise<GetTickersResponse>;
    getKline(request: GetKlineRequest): Promise<GetKlineResponse>;
    getOrderbook(request: GetOrderbookRequest): Promise<GetOrderbookResponse>;
    getMarketDepth(request: GetMarketDepthRequest): Promise<GetMarketDepthResponse>;
    getTrades(request: GetTradesRequest): Promise<GetTradesResponse>;
    getPools(request: GetPoolsRequest): Promise<GetPoolsResponse>;
    getServerTime(request: GetServerTimeRequest): Promise<GetServerTimeResponse>;
    getOrders(request: GetOrdersRequest): Promise<GetOrdersResponse>;
    getOpenOrders(request: GetOpenOrdersRequest): Promise<GetOpenOrdersResponse>;
    getOrderByID(request: GetOrderByIDRequest): Promise<GetOrderByIDResponse>;
    getUnsettled(request: GetUnsettledRequest): Promise<GetUnsettledResponse>;
    postOrder(request: PostOrderRequest): Promise<PostOrderResponse>;
    postCancelOrder(request: PostCancelOrderRequest): Promise<PostCancelOrderResponse>;
    postCancelByClientOrderID(request: PostCancelByClientOrderIDRequest): Promise<PostCancelOrderResponse>;
    postCancelAll(request: PostCancelAllRequest): Promise<PostCancelAllResponse>;
    postSettle(request: PostSettleRequest): Promise<PostSettleResponse>;
    postReplaceByClientOrderID(request: PostOrderRequest): Promise<PostOrderResponse>;
    postReplaceOrder(request: PostReplaceOrderRequest): Promise<PostOrderResponse>;
    postSubmit(request: PostSubmitRequest): Promise<PostSubmitResponse>;
    postSubmitSnipeV2(request: PostSubmitSnipeRequest): Promise<PostSubmitSnipeResponse>;
    postSubmitPaladinV2(request: PostSubmitPaladinRequest): Promise<PostSubmitResponse>;
    postSubmitBatchV2(request: PostSubmitBatchRequest): Promise<PostSubmitBatchResponse>;
    postSubmitV2(request: PostSubmitRequest): Promise<PostSubmitResponse>;
    getAccountBalance(request: GetAccountBalanceRequest): Promise<GetAccountBalanceResponse>;
    getAccountBalanceV2(request: GetAccountBalanceRequest): Promise<GetAccountBalanceResponse>;
    getPrice(request: GetPriceRequest): Promise<GetPriceResponse>;
    getPriorityFee(request: GetPriorityFeeRequest): Promise<GetPriorityFeeResponse>;
    getPriorityFeeByProgram(request: GetPriorityFeeByProgramRequest): RpcReturnType<Promise<GetPriorityFeeByProgramResponse>, []>;
    getQuotes(request: GetQuotesRequest): Promise<GetQuotesResponse>;
    getRecentBlockHash(request: GetRecentBlockHashRequest): Promise<GetRecentBlockHashResponse>;
    getRecentBlockHashV2(request: GetRecentBlockHashRequestV2): Promise<GetRecentBlockHashResponseV2>;
    getLeaderSchedule(request: GetLeaderScheduleRequest): Promise<GetLeaderScheduleResponse>;
    postTradeSwap(request: TradeSwapRequest): Promise<TradeSwapResponse>;
    postRouteTradeSwap(request: RouteTradeSwapRequest): Promise<TradeSwapResponse>;
    postSubmitBatch(request: PostSubmitBatchRequest): Promise<PostSubmitBatchResponse>;
    submitOrderV2(request: PostOrderRequestV2, skipPreFlight?: boolean): Promise<SubmitTransactionResponse>;
    submitCancelOrderV2(request: PostCancelOrderRequestV2, skipPreFlight?: boolean): Promise<PostSubmitBatchResponse>;
    submitSettleV2(request: PostSettleRequestV2, skipPreFlight?: boolean): Promise<PostSubmitResponse>;
    submitReplaceOrderV2(request: PostReplaceOrderRequestV2, skipPreFlight?: boolean): Promise<PostSubmitResponse>;
    submitOrder(request: PostOrderRequest, skipPreFlight?: boolean): Promise<SubmitTransactionResponse>;
    submitCancelOrder(request: PostCancelOrderRequest, skipPreFlight?: boolean): Promise<PostSubmitResponse>;
    submitCancelOrderByClientOrderID(request: PostCancelByClientOrderIDRequest, skipPreFlight?: boolean): Promise<PostSubmitResponse>;
    submitCancelAll(request: PostCancelAllRequest, skipPreFlight?: boolean): Promise<PostSubmitBatchResponse>;
    submitSettle(request: PostSettleRequest, skipPreFlight?: boolean): Promise<PostSubmitResponse>;
    submitReplaceByClientOrderID(request: PostOrderRequest, skipPreFlight?: boolean): Promise<PostSubmitResponse>;
    submitReplaceOrder(request: PostReplaceOrderRequest, skipPreFlight?: boolean): Promise<PostSubmitResponse>;
    submitTradeSwap(request: TradeSwapRequest, submitStrategy: SubmitStrategy, skipPreFlight?: boolean): Promise<PostSubmitBatchResponse>;
    submitRouteTradeSwap(request: RouteTradeSwapRequest, submitStrategy: SubmitStrategy, skipPreFlight?: boolean): Promise<PostSubmitBatchResponse>;
    private requirePrivateKey;
    signAndSubmitTx(transactionMessage: TransactionMessage | undefined, skipPreFlight: boolean, isCleanup: boolean | undefined, frontRunningProtection: boolean): Promise<PostSubmitResponse>;
    signAndSubmitSnipeTx(entries: TransactionMessage[], useStakedRPCs?: boolean): Promise<PostSubmitSnipeResponse>;
    signAndSubmitPaladinTx(transactionMessage: TransactionMessageV2 | undefined, skipPreFlight?: boolean, isCleanup?: boolean, frontRunningProtection?: boolean): Promise<PostSubmitResponse>;
    private signAndSubmitTxs;
    getOrderbooksStream(request: GetOrderbooksRequest): Promise<AsyncGenerator<GetOrderbooksStreamResponse>>;
    getPumpFunNewTokensStream: (request: GetPumpFunNewTokensStreamRequest) => Promise<AsyncGenerator<GetPumpFunNewTokensStreamResponse>>;
    getPumpFunNewAmmPoolStream: (request: GetPumpFunNewAmmPoolStreamRequest) => Promise<AsyncGenerator<GetPumpFunNewAmmPoolStreamResponse>>;
    getPumpFunSwapsStream: (request: GetPumpFunSwapsStreamRequest) => Promise<AsyncGenerator<GetPumpFunSwapsStreamResponse>>;
    getPumpFunAMMSwapStream: (request: GetPumpFunAMMSwapStreamRequest) => Promise<AsyncGenerator<GetPumpFunAMMSwapStreamResponse>>;
    getTickersStream(request: GetTickersStreamRequest): Promise<AsyncGenerator<GetTickersStreamResponse>>;
    getMarketDepthsStream(request: GetMarketsRequest): Promise<AsyncGenerator<GetMarketDepthsStreamResponse>>;
    getTradesStream(request: GetTradesRequest): Promise<AsyncGenerator<GetTradesStreamResponse>>;
    getOrderStatusStream(request: GetOrderStatusStreamRequest): Promise<AsyncGenerator<GetOrderStatusStreamResponse>>;
    getSwapsStream(request: GetSwapsStreamRequest): Promise<AsyncGenerator<GetSwapsStreamResponse>>;
    getPricesStream(request: GetPricesStreamRequest): Promise<AsyncGenerator<GetPricesStreamResponse>>;
    getPriorityFeeStream(request: GetPriorityFeeRequest): Promise<AsyncGenerator<GetPriorityFeeResponse>>;
    getQuotesStream(request: GetQuotesStreamRequest): Promise<AsyncGenerator<GetQuotesStreamResponse>>;
    getRecentBlockHashStream(request: GetRecentBlockHashRequest): Promise<AsyncGenerator<GetRecentBlockHashResponse>>;
    getBlockStream(request: GetBlockStreamRequest): Promise<AsyncGenerator<GetBlockStreamResponse>>;
    getNewRaydiumPoolsStream(request: GetNewRaydiumPoolsRequest): Promise<AsyncGenerator<GetNewRaydiumPoolsResponse>>;
    getNewRaydiumPoolsByTransactionStream(request: GetNewRaydiumPoolsByTransactionRequest): RpcReturnType<AsyncGenerator<GetNewRaydiumPoolsByTransactionResponse, any, unknown>, [
    ]>;
    getPoolReservesStream(request: GetPoolReservesStreamRequest): Promise<AsyncGenerator<GetPoolReservesStreamResponse>>;
    getBundleTipStream(request: GetBundleTipRequest): Promise<AsyncGenerator<GetBundleTipResponse>>;
    getPriorityFeeByProgramStream(request: GetPriorityFeeByProgramRequest): Promise<AsyncGenerator<GetPriorityFeeByProgramResponse>>;
    cancelAllGetOrderbooksStream: () => Promise<Awaited<boolean>[]>;
    cancelAllGetSwapsStream: () => Promise<Awaited<boolean>[]>;
    cancelGetOrderbooksStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelGetSwapsStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelAllGetTradesStream: () => Promise<Awaited<boolean>[]>;
    cancelGetTradesStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelAllGetTickersStream: () => Promise<Awaited<boolean>[]>;
    cancelGetTickersStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelAllGetOrderStatusStream: () => Promise<Awaited<boolean>[]>;
    cancelGetOrderStatusStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelAllGetRecentBlockhashStream: () => Promise<Awaited<boolean>[]>;
    cancelGetRecentBlockhashStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelAllGetPriorityFeeStream: () => Promise<Awaited<boolean>[]>;
    cancelGetPriorityFeeStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelAllGetQuotesStream: () => Promise<Awaited<boolean>[]>;
    cancelGetQuotesStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelAllGetPoolReservesStream: () => Promise<Awaited<boolean>[]>;
    cancelAllGetPumpFunNewAmmPoolStream: () => Promise<Awaited<boolean>[]>;
    cancelGetPoolReservesStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelAllGetNewRaydiumPoolsStream: () => Promise<Awaited<boolean>[]>;
    cancelGetNewRaydiumPoolsStreamByCount: (streamNumber: number) => Promise<boolean>;
    cancelAllGetBundleTipStream: () => Promise<Awaited<boolean>[]>;
    cancelGetBundleTipStreamByCount: (streamNumber: number) => Promise<boolean>;
    getZetaTransactionStream(request: GetZetaTransactionStreamRequest): Promise<AsyncGenerator<GetZetaTransactionStreamResponse>>;
    postSubmitMineOre(request: PostSubmitRequest): Promise<PostSubmitResponse>;
    postZetaCrossMarginAccount(request: PostZetaCrossMarginAccountRequest): Promise<PostZetaCrossMarginAccountResponse>;
}
//# sourceMappingURL=base.d.ts.map
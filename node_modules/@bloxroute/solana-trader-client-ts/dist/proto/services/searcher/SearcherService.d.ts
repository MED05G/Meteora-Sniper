import { RpcReturnType, RpcClientImpl } from "../../runtime/rpc";
import { Type as SubscribeBundleResultsRequest, encodeBinary, decodeBinary } from "../../messages/searcher/SubscribeBundleResultsRequest";
import { Type as BundleResult, encodeBinary as encodeBinary_1, decodeBinary as decodeBinary_1 } from "../../messages/bundle/BundleResult";
import { Type as MempoolSubscription, encodeBinary as encodeBinary_2, decodeBinary as decodeBinary_2 } from "../../messages/searcher/MempoolSubscription";
import { Type as PendingTxNotification, encodeBinary as encodeBinary_3, decodeBinary as decodeBinary_3 } from "../../messages/searcher/PendingTxNotification";
import { Type as SendBundleRequest, encodeBinary as encodeBinary_4, decodeBinary as decodeBinary_4 } from "../../messages/searcher/SendBundleRequest";
import { Type as SendBundleResponse, encodeBinary as encodeBinary_5, decodeBinary as decodeBinary_5 } from "../../messages/searcher/SendBundleResponse";
import { Type as NextScheduledLeaderRequest, encodeBinary as encodeBinary_6, decodeBinary as decodeBinary_6 } from "../../messages/searcher/NextScheduledLeaderRequest";
import { Type as NextScheduledLeaderResponse, encodeBinary as encodeBinary_7, decodeBinary as decodeBinary_7 } from "../../messages/searcher/NextScheduledLeaderResponse";
import { Type as ConnectedLeadersRequest, encodeBinary as encodeBinary_8, decodeBinary as decodeBinary_8 } from "../../messages/searcher/ConnectedLeadersRequest";
import { Type as ConnectedLeadersResponse, encodeBinary as encodeBinary_9, decodeBinary as decodeBinary_9 } from "../../messages/searcher/ConnectedLeadersResponse";
import { Type as ConnectedLeadersRegionedRequest, encodeBinary as encodeBinary_10, decodeBinary as decodeBinary_10 } from "../../messages/searcher/ConnectedLeadersRegionedRequest";
import { Type as ConnectedLeadersRegionedResponse, encodeBinary as encodeBinary_11, decodeBinary as decodeBinary_11 } from "../../messages/searcher/ConnectedLeadersRegionedResponse";
import { Type as GetTipAccountsRequest, encodeBinary as encodeBinary_12, decodeBinary as decodeBinary_12 } from "../../messages/searcher/GetTipAccountsRequest";
import { Type as GetTipAccountsResponse, encodeBinary as encodeBinary_13, decodeBinary as decodeBinary_13 } from "../../messages/searcher/GetTipAccountsResponse";
import { Type as GetRegionsRequest, encodeBinary as encodeBinary_14, decodeBinary as decodeBinary_14 } from "../../messages/searcher/GetRegionsRequest";
import { Type as GetRegionsResponse, encodeBinary as encodeBinary_15, decodeBinary as decodeBinary_15 } from "../../messages/searcher/GetRegionsResponse";
export interface Service<TReqArgs extends any[] = [], TResArgs extends any[] = []> {
    subscribeBundleResults(request: SubscribeBundleResultsRequest, ...args: TReqArgs): RpcReturnType<AsyncGenerator<BundleResult>, TResArgs>;
    subscribeMempool(request: MempoolSubscription, ...args: TReqArgs): RpcReturnType<AsyncGenerator<PendingTxNotification>, TResArgs>;
    sendBundle(request: SendBundleRequest, ...args: TReqArgs): RpcReturnType<Promise<SendBundleResponse>, TResArgs>;
    getNextScheduledLeader(request: NextScheduledLeaderRequest, ...args: TReqArgs): RpcReturnType<Promise<NextScheduledLeaderResponse>, TResArgs>;
    getConnectedLeaders(request: ConnectedLeadersRequest, ...args: TReqArgs): RpcReturnType<Promise<ConnectedLeadersResponse>, TResArgs>;
    getConnectedLeadersRegioned(request: ConnectedLeadersRegionedRequest, ...args: TReqArgs): RpcReturnType<Promise<ConnectedLeadersRegionedResponse>, TResArgs>;
    getTipAccounts(request: GetTipAccountsRequest, ...args: TReqArgs): RpcReturnType<Promise<GetTipAccountsResponse>, TResArgs>;
    getRegions(request: GetRegionsRequest, ...args: TReqArgs): RpcReturnType<Promise<GetRegionsResponse>, TResArgs>;
}
export declare type MethodDescriptors = typeof methodDescriptors;
export declare const methodDescriptors: {
    readonly subscribeBundleResults: {
        readonly methodName: "SubscribeBundleResults";
        readonly service: {
            readonly serviceName: "searcher.SearcherService";
        };
        readonly requestStream: false;
        readonly responseStream: true;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary;
            readonly deserializeBinary: typeof decodeBinary;
            readonly serializeJson: (value: SubscribeBundleResultsRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_1;
            readonly deserializeBinary: typeof decodeBinary_1;
            readonly serializeJson: (value: BundleResult) => string;
        };
    };
    readonly subscribeMempool: {
        readonly methodName: "SubscribeMempool";
        readonly service: {
            readonly serviceName: "searcher.SearcherService";
        };
        readonly requestStream: false;
        readonly responseStream: true;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary_2;
            readonly deserializeBinary: typeof decodeBinary_2;
            readonly serializeJson: (value: MempoolSubscription) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_3;
            readonly deserializeBinary: typeof decodeBinary_3;
            readonly serializeJson: (value: PendingTxNotification) => string;
        };
    };
    readonly sendBundle: {
        readonly methodName: "SendBundle";
        readonly service: {
            readonly serviceName: "searcher.SearcherService";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary_4;
            readonly deserializeBinary: typeof decodeBinary_4;
            readonly serializeJson: (value: SendBundleRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_5;
            readonly deserializeBinary: typeof decodeBinary_5;
            readonly serializeJson: (value: SendBundleResponse) => string;
        };
    };
    readonly getNextScheduledLeader: {
        readonly methodName: "GetNextScheduledLeader";
        readonly service: {
            readonly serviceName: "searcher.SearcherService";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary_6;
            readonly deserializeBinary: typeof decodeBinary_6;
            readonly serializeJson: (value: NextScheduledLeaderRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_7;
            readonly deserializeBinary: typeof decodeBinary_7;
            readonly serializeJson: (value: NextScheduledLeaderResponse) => string;
        };
    };
    readonly getConnectedLeaders: {
        readonly methodName: "GetConnectedLeaders";
        readonly service: {
            readonly serviceName: "searcher.SearcherService";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary_8;
            readonly deserializeBinary: typeof decodeBinary_8;
            readonly serializeJson: (value: ConnectedLeadersRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_9;
            readonly deserializeBinary: typeof decodeBinary_9;
            readonly serializeJson: (value: ConnectedLeadersResponse) => string;
        };
    };
    readonly getConnectedLeadersRegioned: {
        readonly methodName: "GetConnectedLeadersRegioned";
        readonly service: {
            readonly serviceName: "searcher.SearcherService";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary_10;
            readonly deserializeBinary: typeof decodeBinary_10;
            readonly serializeJson: (value: ConnectedLeadersRegionedRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_11;
            readonly deserializeBinary: typeof decodeBinary_11;
            readonly serializeJson: (value: ConnectedLeadersRegionedResponse) => string;
        };
    };
    readonly getTipAccounts: {
        readonly methodName: "GetTipAccounts";
        readonly service: {
            readonly serviceName: "searcher.SearcherService";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary_12;
            readonly deserializeBinary: typeof decodeBinary_12;
            readonly serializeJson: (value: GetTipAccountsRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_13;
            readonly deserializeBinary: typeof decodeBinary_13;
            readonly serializeJson: (value: GetTipAccountsResponse) => string;
        };
    };
    readonly getRegions: {
        readonly methodName: "GetRegions";
        readonly service: {
            readonly serviceName: "searcher.SearcherService";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary_14;
            readonly deserializeBinary: typeof decodeBinary_14;
            readonly serializeJson: (value: GetRegionsRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_15;
            readonly deserializeBinary: typeof decodeBinary_15;
            readonly serializeJson: (value: GetRegionsResponse) => string;
        };
    };
};
export declare class RpcError<TTrailer = any> extends Error {
    trailer: TTrailer;
    constructor(trailer: TTrailer);
}
export interface CreateServiceClientConfig {
    responseOnly?: boolean;
    devtools?: true | {
        tags: string[];
    };
}
export declare function createServiceClient<TMetadata, THeader, TTrailer>(rpcClientImpl: RpcClientImpl<TMetadata, THeader, TTrailer>, config?: undefined): Service<[] | [TMetadata], []>;
export declare function createServiceClient<TMetadata, THeader, TTrailer>(rpcClientImpl: RpcClientImpl<TMetadata, THeader, TTrailer>, config: CreateServiceClientConfig & {
    responseOnly: false;
}): Service<[] | [TMetadata], [THeader, Promise<TTrailer>]>;
export declare function createServiceClient<TMetadata, THeader, TTrailer>(rpcClientImpl: RpcClientImpl<TMetadata, THeader, TTrailer>, config: CreateServiceClientConfig & {
    responseOnly?: true;
}): Service<[] | [TMetadata], []>;
//# sourceMappingURL=SearcherService.d.ts.map
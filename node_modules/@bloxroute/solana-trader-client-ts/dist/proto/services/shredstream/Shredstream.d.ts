import { RpcReturnType, RpcClientImpl } from "../../runtime/rpc";
import { Type as Heartbeat, encodeBinary, decodeBinary } from "../../messages/shredstream/Heartbeat";
import { Type as HeartbeatResponse, encodeBinary as encodeBinary_1, decodeBinary as decodeBinary_1 } from "../../messages/shredstream/HeartbeatResponse";
export interface Service<TReqArgs extends any[] = [], TResArgs extends any[] = []> {
    sendHeartbeat(request: Heartbeat, ...args: TReqArgs): RpcReturnType<Promise<HeartbeatResponse>, TResArgs>;
}
export declare type MethodDescriptors = typeof methodDescriptors;
export declare const methodDescriptors: {
    readonly sendHeartbeat: {
        readonly methodName: "SendHeartbeat";
        readonly service: {
            readonly serviceName: "shredstream.Shredstream";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary;
            readonly deserializeBinary: typeof decodeBinary;
            readonly serializeJson: (value: Heartbeat) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_1;
            readonly deserializeBinary: typeof decodeBinary_1;
            readonly serializeJson: (value: HeartbeatResponse) => string;
        };
    };
};
export declare class RpcError<TTrailer = any> extends Error {
    trailer: TTrailer;
    constructor(trailer: TTrailer);
}
export interface CreateServiceClientConfig {
    responseOnly?: boolean;
    devtools?: true | {
        tags: string[];
    };
}
export declare function createServiceClient<TMetadata, THeader, TTrailer>(rpcClientImpl: RpcClientImpl<TMetadata, THeader, TTrailer>, config?: undefined): Service<[] | [TMetadata], []>;
export declare function createServiceClient<TMetadata, THeader, TTrailer>(rpcClientImpl: RpcClientImpl<TMetadata, THeader, TTrailer>, config: CreateServiceClientConfig & {
    responseOnly: false;
}): Service<[] | [TMetadata], [THeader, Promise<TTrailer>]>;
export declare function createServiceClient<TMetadata, THeader, TTrailer>(rpcClientImpl: RpcClientImpl<TMetadata, THeader, TTrailer>, config: CreateServiceClientConfig & {
    responseOnly?: true;
}): Service<[] | [TMetadata], []>;
//# sourceMappingURL=Shredstream.d.ts.map
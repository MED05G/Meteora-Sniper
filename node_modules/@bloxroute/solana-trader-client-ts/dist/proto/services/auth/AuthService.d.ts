import { RpcReturnType, RpcClientImpl } from "../../runtime/rpc";
import { Type as GenerateAuthChallengeRequest, encodeBinary, decodeBinary } from "../../messages/auth/GenerateAuthChallengeRequest";
import { Type as GenerateAuthChallengeResponse, encodeBinary as encodeBinary_1, decodeBinary as decodeBinary_1 } from "../../messages/auth/GenerateAuthChallengeResponse";
import { Type as GenerateAuthTokensRequest, encodeBinary as encodeBinary_2, decodeBinary as decodeBinary_2 } from "../../messages/auth/GenerateAuthTokensRequest";
import { Type as GenerateAuthTokensResponse, encodeBinary as encodeBinary_3, decodeBinary as decodeBinary_3 } from "../../messages/auth/GenerateAuthTokensResponse";
import { Type as RefreshAccessTokenRequest, encodeBinary as encodeBinary_4, decodeBinary as decodeBinary_4 } from "../../messages/auth/RefreshAccessTokenRequest";
import { Type as RefreshAccessTokenResponse, encodeBinary as encodeBinary_5, decodeBinary as decodeBinary_5 } from "../../messages/auth/RefreshAccessTokenResponse";
export interface Service<TReqArgs extends any[] = [], TResArgs extends any[] = []> {
    generateAuthChallenge(request: GenerateAuthChallengeRequest, ...args: TReqArgs): RpcReturnType<Promise<GenerateAuthChallengeResponse>, TResArgs>;
    generateAuthTokens(request: GenerateAuthTokensRequest, ...args: TReqArgs): RpcReturnType<Promise<GenerateAuthTokensResponse>, TResArgs>;
    refreshAccessToken(request: RefreshAccessTokenRequest, ...args: TReqArgs): RpcReturnType<Promise<RefreshAccessTokenResponse>, TResArgs>;
}
export declare type MethodDescriptors = typeof methodDescriptors;
export declare const methodDescriptors: {
    readonly generateAuthChallenge: {
        readonly methodName: "GenerateAuthChallenge";
        readonly service: {
            readonly serviceName: "auth.AuthService";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary;
            readonly deserializeBinary: typeof decodeBinary;
            readonly serializeJson: (value: GenerateAuthChallengeRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_1;
            readonly deserializeBinary: typeof decodeBinary_1;
            readonly serializeJson: (value: GenerateAuthChallengeResponse) => string;
        };
    };
    readonly generateAuthTokens: {
        readonly methodName: "GenerateAuthTokens";
        readonly service: {
            readonly serviceName: "auth.AuthService";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary_2;
            readonly deserializeBinary: typeof decodeBinary_2;
            readonly serializeJson: (value: GenerateAuthTokensRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_3;
            readonly deserializeBinary: typeof decodeBinary_3;
            readonly serializeJson: (value: GenerateAuthTokensResponse) => string;
        };
    };
    readonly refreshAccessToken: {
        readonly methodName: "RefreshAccessToken";
        readonly service: {
            readonly serviceName: "auth.AuthService";
        };
        readonly requestStream: false;
        readonly responseStream: false;
        readonly requestType: {
            readonly serializeBinary: typeof encodeBinary_4;
            readonly deserializeBinary: typeof decodeBinary_4;
            readonly serializeJson: (value: RefreshAccessTokenRequest) => string;
        };
        readonly responseType: {
            readonly serializeBinary: typeof encodeBinary_5;
            readonly deserializeBinary: typeof decodeBinary_5;
            readonly serializeJson: (value: RefreshAccessTokenResponse) => string;
        };
    };
};
export declare class RpcError<TTrailer = any> extends Error {
    trailer: TTrailer;
    constructor(trailer: TTrailer);
}
export interface CreateServiceClientConfig {
    responseOnly?: boolean;
    devtools?: true | {
        tags: string[];
    };
}
export declare function createServiceClient<TMetadata, THeader, TTrailer>(rpcClientImpl: RpcClientImpl<TMetadata, THeader, TTrailer>, config?: undefined): Service<[] | [TMetadata], []>;
export declare function createServiceClient<TMetadata, THeader, TTrailer>(rpcClientImpl: RpcClientImpl<TMetadata, THeader, TTrailer>, config: CreateServiceClientConfig & {
    responseOnly: false;
}): Service<[] | [TMetadata], [THeader, Promise<TTrailer>]>;
export declare function createServiceClient<TMetadata, THeader, TTrailer>(rpcClientImpl: RpcClientImpl<TMetadata, THeader, TTrailer>, config: CreateServiceClientConfig & {
    responseOnly?: true;
}): Service<[] | [TMetadata], []>;
//# sourceMappingURL=AuthService.d.ts.map
import { Type as Accepted } from "./Accepted";
import { Type as Rejected } from "./Rejected";
import { Type as Finalized } from "./Finalized";
import { Type as Processed } from "./Processed";
import { Type as Dropped } from "./Dropped";
export declare namespace $.bundle {
    interface BundleResult {
        bundleId: string;
        result?: ({
            field: "accepted";
            value: Accepted;
        } | {
            field: "rejected";
            value: Rejected;
        } | {
            field: "finalized";
            value: Finalized;
        } | {
            field: "processed";
            value: Processed;
        } | {
            field: "dropped";
            value: Dropped;
        });
    }
}
export declare type Type = $.bundle.BundleResult;
export declare function getDefaultValue(): $.bundle.BundleResult;
export declare function createValue(partialValue: Partial<$.bundle.BundleResult>): $.bundle.BundleResult;
export declare function encodeJson(value: $.bundle.BundleResult): unknown;
export declare function decodeJson(value: any): $.bundle.BundleResult;
export declare function encodeBinary(value: $.bundle.BundleResult): Uint8Array;
export declare function decodeBinary(binary: Uint8Array): $.bundle.BundleResult;
//# sourceMappingURL=BundleResult.d.ts.map
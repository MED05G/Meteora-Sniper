import { Type as StateAuctionBidRejected } from "./StateAuctionBidRejected";
import { Type as WinningBatchBidRejected } from "./WinningBatchBidRejected";
import { Type as SimulationFailure } from "./SimulationFailure";
import { Type as InternalError } from "./InternalError";
import { Type as DroppedBundle } from "./DroppedBundle";
export declare namespace $.bundle {
    interface Rejected {
        reason?: ({
            field: "stateAuctionBidRejected";
            value: StateAuctionBidRejected;
        } | {
            field: "winningBatchBidRejected";
            value: WinningBatchBidRejected;
        } | {
            field: "simulationFailure";
            value: SimulationFailure;
        } | {
            field: "internalError";
            value: InternalError;
        } | {
            field: "droppedBundle";
            value: DroppedBundle;
        });
    }
}
export declare type Type = $.bundle.Rejected;
export declare function getDefaultValue(): $.bundle.Rejected;
export declare function createValue(partialValue: Partial<$.bundle.Rejected>): $.bundle.Rejected;
export declare function encodeJson(value: $.bundle.Rejected): unknown;
export declare function decodeJson(value: any): $.bundle.Rejected;
export declare function encodeBinary(value: $.bundle.Rejected): Uint8Array;
export declare function decodeBinary(binary: Uint8Array): $.bundle.Rejected;
//# sourceMappingURL=Rejected.d.ts.map
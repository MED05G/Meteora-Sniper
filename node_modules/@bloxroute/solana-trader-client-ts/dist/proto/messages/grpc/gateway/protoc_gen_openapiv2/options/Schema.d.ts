import { Type as JSONSchema } from "./JSONSchema";
import { Type as ExternalDocumentation } from "./ExternalDocumentation";
export declare namespace $.grpc.gateway.protoc_gen_openapiv2.options {
    interface Schema {
        jsonSchema?: JSONSchema;
        discriminator: string;
        readOnly: boolean;
        externalDocs?: ExternalDocumentation;
        example: string;
    }
}
export declare type Type = $.grpc.gateway.protoc_gen_openapiv2.options.Schema;
export declare function getDefaultValue(): $.grpc.gateway.protoc_gen_openapiv2.options.Schema;
export declare function createValue(partialValue: Partial<$.grpc.gateway.protoc_gen_openapiv2.options.Schema>): $.grpc.gateway.protoc_gen_openapiv2.options.Schema;
export declare function encodeJson(value: $.grpc.gateway.protoc_gen_openapiv2.options.Schema): unknown;
export declare function decodeJson(value: any): $.grpc.gateway.protoc_gen_openapiv2.options.Schema;
export declare function encodeBinary(value: $.grpc.gateway.protoc_gen_openapiv2.options.Schema): Uint8Array;
export declare function decodeBinary(binary: Uint8Array): $.grpc.gateway.protoc_gen_openapiv2.options.Schema;
//# sourceMappingURL=Schema.d.ts.map
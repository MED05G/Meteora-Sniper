import { Type as Schema } from "./Schema";
import { Type as Header } from "./Header";
import { Type as Value } from "../../../../google/protobuf/Value";
export declare namespace $.grpc.gateway.protoc_gen_openapiv2.options {
    interface Response {
        description: string;
        schema?: Schema;
        headers: Map<string, Header>;
        examples: Map<string, string>;
        extensions: Map<string, Value>;
    }
}
export declare type Type = $.grpc.gateway.protoc_gen_openapiv2.options.Response;
export declare function getDefaultValue(): $.grpc.gateway.protoc_gen_openapiv2.options.Response;
export declare function createValue(partialValue: Partial<$.grpc.gateway.protoc_gen_openapiv2.options.Response>): $.grpc.gateway.protoc_gen_openapiv2.options.Response;
export declare function encodeJson(value: $.grpc.gateway.protoc_gen_openapiv2.options.Response): unknown;
export declare function decodeJson(value: any): $.grpc.gateway.protoc_gen_openapiv2.options.Response;
export declare function encodeBinary(value: $.grpc.gateway.protoc_gen_openapiv2.options.Response): Uint8Array;
export declare function decodeBinary(binary: Uint8Array): $.grpc.gateway.protoc_gen_openapiv2.options.Response;
//# sourceMappingURL=Response.d.ts.map
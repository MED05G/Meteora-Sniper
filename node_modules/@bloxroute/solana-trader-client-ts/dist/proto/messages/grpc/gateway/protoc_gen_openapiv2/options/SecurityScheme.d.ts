import { Type as Type_1 } from "./(SecurityScheme)/Type";
import { Type as In } from "./(SecurityScheme)/In";
import { Type as Flow } from "./(SecurityScheme)/Flow";
import { Type as Scopes } from "./Scopes";
import { Type as Value } from "../../../../google/protobuf/Value";
export declare namespace $.grpc.gateway.protoc_gen_openapiv2.options {
    interface SecurityScheme {
        type: Type_1;
        description: string;
        name: string;
        in: In;
        flow: Flow;
        authorizationUrl: string;
        tokenUrl: string;
        scopes?: Scopes;
        extensions: Map<string, Value>;
    }
}
export declare type Type = $.grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme;
export declare function getDefaultValue(): $.grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme;
export declare function createValue(partialValue: Partial<$.grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme>): $.grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme;
export declare function encodeJson(value: $.grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme): unknown;
export declare function decodeJson(value: any): $.grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme;
export declare function encodeBinary(value: $.grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme): Uint8Array;
export declare function decodeBinary(binary: Uint8Array): $.grpc.gateway.protoc_gen_openapiv2.options.SecurityScheme;
//# sourceMappingURL=SecurityScheme.d.ts.map
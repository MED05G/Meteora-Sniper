import { Type as JSONSchemaSimpleTypes } from "./(JSONSchema)/JSONSchemaSimpleTypes";
import { Type as Value } from "../../../../google/protobuf/Value";
import { Type as FieldConfiguration } from "./(JSONSchema)/FieldConfiguration";
export declare namespace $.grpc.gateway.protoc_gen_openapiv2.options {
    interface JSONSchema {
        ref: string;
        title: string;
        description: string;
        default: string;
        readOnly: boolean;
        example: string;
        multipleOf: number;
        maximum: number;
        exclusiveMaximum: boolean;
        minimum: number;
        exclusiveMinimum: boolean;
        maxLength: string;
        minLength: string;
        pattern: string;
        maxItems: string;
        minItems: string;
        uniqueItems: boolean;
        maxProperties: string;
        minProperties: string;
        required: string[];
        array: string[];
        type: JSONSchemaSimpleTypes[];
        format: string;
        enum: string[];
        extensions: Map<string, Value>;
        fieldConfiguration?: FieldConfiguration;
    }
}
export declare type Type = $.grpc.gateway.protoc_gen_openapiv2.options.JSONSchema;
export declare function getDefaultValue(): $.grpc.gateway.protoc_gen_openapiv2.options.JSONSchema;
export declare function createValue(partialValue: Partial<$.grpc.gateway.protoc_gen_openapiv2.options.JSONSchema>): $.grpc.gateway.protoc_gen_openapiv2.options.JSONSchema;
export declare function encodeJson(value: $.grpc.gateway.protoc_gen_openapiv2.options.JSONSchema): unknown;
export declare function decodeJson(value: any): $.grpc.gateway.protoc_gen_openapiv2.options.JSONSchema;
export declare function encodeBinary(value: $.grpc.gateway.protoc_gen_openapiv2.options.JSONSchema): Uint8Array;
export declare function decodeBinary(binary: Uint8Array): $.grpc.gateway.protoc_gen_openapiv2.options.JSONSchema;
//# sourceMappingURL=JSONSchema.d.ts.map
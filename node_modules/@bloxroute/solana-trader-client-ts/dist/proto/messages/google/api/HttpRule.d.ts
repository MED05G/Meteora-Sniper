import { Type as CustomHttpPattern } from "./CustomHttpPattern";
import { Type as HttpRule_1 } from "./HttpRule";
export declare namespace $.google.api {
    interface HttpRule {
        selector: string;
        body: string;
        additionalBindings: HttpRule_1[];
        responseBody: string;
        pattern?: ({
            field: "get";
            value: string;
        } | {
            field: "put";
            value: string;
        } | {
            field: "post";
            value: string;
        } | {
            field: "delete";
            value: string;
        } | {
            field: "patch";
            value: string;
        } | {
            field: "custom";
            value: CustomHttpPattern;
        });
    }
}
export declare type Type = $.google.api.HttpRule;
export declare function getDefaultValue(): $.google.api.HttpRule;
export declare function createValue(partialValue: Partial<$.google.api.HttpRule>): $.google.api.HttpRule;
export declare function encodeJson(value: $.google.api.HttpRule): unknown;
export declare function decodeJson(value: any): $.google.api.HttpRule;
export declare function encodeBinary(value: $.google.api.HttpRule): Uint8Array;
export declare function decodeBinary(binary: Uint8Array): $.google.api.HttpRule;
//# sourceMappingURL=HttpRule.d.ts.map
import { Type as Struct } from "./Struct";
import { Type as ListValue } from "./ListValue";
export declare namespace $.google.protobuf {
    interface Value {
        kind?: ({
            field: "nullValue";
            value: null;
        } | {
            field: "numberValue";
            value: number;
        } | {
            field: "stringValue";
            value: string;
        } | {
            field: "boolValue";
            value: boolean;
        } | {
            field: "structValue";
            value: Struct;
        } | {
            field: "listValue";
            value: ListValue;
        });
    }
}
export declare type Type = $.google.protobuf.Value;
export declare function getDefaultValue(): $.google.protobuf.Value;
export declare function createValue(partialValue: Partial<$.google.protobuf.Value>): $.google.protobuf.Value;
export declare function encodeJson(value: $.google.protobuf.Value): unknown;
export declare function decodeJson(value: any): $.google.protobuf.Value;
export declare function encodeBinary(value: $.google.protobuf.Value): Uint8Array;
export declare function decodeBinary(binary: Uint8Array): $.google.protobuf.Value;
//# sourceMappingURL=Value.d.ts.map
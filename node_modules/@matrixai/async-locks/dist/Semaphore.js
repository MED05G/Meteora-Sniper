"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const resources_1 = require("@matrixai/resources");
const utils = __importStar(require("./utils"));
const errors = __importStar(require("./errors"));
class Semaphore {
    limit;
    priority;
    _count = 0;
    currentWeight = 0;
    queue = [];
    abortQueueMap = new WeakMap();
    constructor(limit, priority = false) {
        if (limit < 1) {
            throw new RangeError('Semaphore must be constructed with `limit` >= 1');
        }
        this.limit = limit;
        this.priority = priority;
    }
    get count() {
        return this._count;
    }
    /**
     * This will be true synchronously upon calling `this.lock()()`.
     */
    isLocked() {
        return this._count > 0;
    }
    lock(...params) {
        const weight = (params.length === 2
            ? params[0]
            : typeof params[0] === 'number'
                ? params[0]
                : undefined) ?? 1;
        let ctx = params.length === 2
            ? params[1]
            : typeof params[0] !== 'number'
                ? params[0]
                : undefined;
        if (weight < 1) {
            throw new RangeError('Semaphore must be locked with `weight` >= 1');
        }
        ctx = ctx != null ? { ...ctx } : {};
        return () => {
            return utils.setupTimedCancellable((ctx, weight) => {
                this._count++;
                // Change `any` time to the resource thing
                const { p: lockP, resolveP: resolveLockP, rejectP: rejectLockP, } = utils.promise();
                // If signal is already aborted, then we can reject with reason
                if (ctx.signal.aborted) {
                    this._count--;
                    rejectLockP(ctx.signal.reason);
                    return lockP;
                }
                const abortHandler = () => {
                    this._count--;
                    const taskToAbort = this.abortQueueMap.get(abortHandler);
                    if (taskToAbort != null) {
                        taskToAbort.aborted = true;
                    }
                    rejectLockP(ctx.signal.reason);
                };
                let released = false;
                const task = {
                    task: () => {
                        this.currentWeight += weight;
                        ctx.signal.removeEventListener('abort', abortHandler);
                        resolveLockP([
                            async () => {
                                if (released)
                                    return;
                                released = true;
                                this._count--;
                                this.currentWeight -= weight;
                                this.processQueue();
                            },
                            this,
                        ]);
                    },
                    weight,
                    abortHandler,
                    aborted: false,
                };
                ctx.signal.addEventListener('abort', abortHandler, { once: true });
                this.abortQueueMap.set(abortHandler, task);
                this.insertQueue(task);
                this.processQueue();
                return lockP;
            }, true, Infinity, errors.ErrorAsyncLocksTimeout, ctx, [weight]);
        };
    }
    waitForUnlock(...params) {
        const weight = (params.length === 2
            ? params[0]
            : typeof params[0] === 'number'
                ? params[0]
                : undefined) ?? 1;
        let ctx = params.length === 2
            ? params[1]
            : typeof params[0] !== 'number'
                ? params[0]
                : undefined;
        if (weight < 1) {
            throw new RangeError('Semaphore must be locked with `weight` >= 1');
        }
        ctx = ctx != null ? { ...ctx } : {};
        return utils.setupTimedCancellable((ctx, weight) => {
            const { p: waitP, resolveP: resolveWaitP, rejectP: rejectWaitP, } = utils.promise();
            if (ctx.signal.aborted) {
                rejectWaitP(ctx.signal.reason);
                return waitP;
            }
            const abortHandler = () => {
                const taskToAbort = this.abortQueueMap.get(abortHandler);
                if (taskToAbort != null) {
                    taskToAbort.aborted = true;
                }
                rejectWaitP(ctx.signal.reason);
            };
            const task = {
                task: () => {
                    ctx.signal.removeEventListener('abort', abortHandler);
                    resolveWaitP();
                },
                weight,
                abortHandler,
                aborted: false,
            };
            ctx.signal.addEventListener('abort', abortHandler, { once: true });
            this.abortQueueMap.set(abortHandler, task);
            this.insertQueue(task);
            this.processQueue();
            return waitP;
        }, true, Infinity, errors.ErrorAsyncLocksTimeout, ctx, [weight]);
    }
    withF(...params) {
        const f = params.pop();
        return (0, resources_1.withF)([this.lock(...params)], ([semaphore]) => f(semaphore));
    }
    withG(...params) {
        const g = params.pop();
        return (0, resources_1.withG)([this.lock(...params)], ([semaphore]) => g(semaphore));
    }
    insertQueue(task) {
        // If prioritising small weights, then perform insertion sort.
        // The resulting queue will be sorted from largest weights to smallest weights.
        if (this.priority) {
            let i = this.queue.length;
            while (i > 0 && this.queue[i - 1].weight < task.weight) {
                i--;
            }
            this.queue.splice(i, 0, task);
        }
        else {
            // Enqueuing into the queue is unfortunately not O(1).
            this.queue.unshift(task);
        }
    }
    processQueue() {
        while (this.queue.length > 0 &&
            this.currentWeight + this.queue[this.queue.length - 1].weight <=
                this.limit) {
            const task = this.queue.pop();
            if (!task.aborted) {
                task.task();
            }
        }
    }
}
exports.default = Semaphore;
//# sourceMappingURL=Semaphore.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const async_cancellable_1 = require("@matrixai/async-cancellable");
const resources_1 = require("@matrixai/resources");
const Lock_1 = __importDefault(require("./Lock"));
const utils = __importStar(require("./utils"));
const errors = __importStar(require("./errors"));
/**
 * Read-preferring read write lock
 */
class RWLockReader {
    readersLock = new Lock_1.default();
    writersLock = new Lock_1.default();
    writersRelease;
    readerCountBlocked = 0;
    _readerCount = 0;
    _writerCount = 0;
    acquireWritersLockP;
    get count() {
        return this.readerCount + this.writerCount;
    }
    get readerCount() {
        return this._readerCount + this.readerCountBlocked;
    }
    get writerCount() {
        return this._writerCount;
    }
    /**
     * Check if locked
     * If passed `type`, it will also check that the active lock is of that type
     */
    isLocked(type) {
        if (type === 'read') {
            return this._readerCount > 0 || this.readersLock.isLocked();
        }
        else if (type === 'write') {
            return this._readerCount === 0 && this.writersLock.isLocked();
        }
        else {
            return (this._readerCount > 0 ||
                this.readersLock.isLocked() ||
                this.writersLock.isLocked());
        }
    }
    lock(...params) {
        const type = (params.length === 2
            ? params[0]
            : typeof params[0] === 'string'
                ? params[0]
                : undefined) ?? 'write';
        const ctx = params.length === 2
            ? params[1]
            : typeof params[0] !== 'string'
                ? params[0]
                : undefined;
        switch (type) {
            case 'read':
                return this.read(ctx);
            case 'write':
                return this.write(ctx);
        }
    }
    read(ctx) {
        ctx = ctx != null ? { ...ctx } : {};
        return () => {
            return utils.setupTimedCancellable(async (ctx) => {
                ++this.readerCountBlocked;
                const acquireReadersLock = this.readersLock.lock(ctx);
                const acquireReadersLockP = acquireReadersLock();
                let readersRelease;
                try {
                    [readersRelease] = await acquireReadersLockP;
                    --this.readerCountBlocked;
                }
                catch (e) {
                    --this.readerCountBlocked;
                    throw e;
                }
                const readerCount = ++this._readerCount;
                // The first reader locks
                if (readerCount === 1) {
                    const acquireWritersLock = this.writersLock.lock(ctx);
                    this.acquireWritersLockP = acquireWritersLock();
                    try {
                        [this.writersRelease] = await this.acquireWritersLockP;
                        await readersRelease();
                    }
                    catch (e) {
                        await readersRelease();
                        --this._readerCount;
                        throw e;
                    }
                }
                else {
                    await readersRelease();
                    await this.acquireWritersLockP.catch(() => { });
                }
                let released = false;
                return [
                    async () => {
                        if (released)
                            return;
                        released = true;
                        [readersRelease] = await this.readersLock.lock()();
                        const readerCount = --this._readerCount;
                        // The last reader unlocks
                        if (readerCount === 0) {
                            await this.writersRelease();
                        }
                        await readersRelease();
                    },
                    this,
                ];
            }, true, Infinity, errors.ErrorAsyncLocksTimeout, ctx, []);
        };
    }
    write(ctx) {
        return () => {
            ++this._writerCount;
            const acquireWritersLock = this.writersLock.lock(ctx);
            const acquireWritersLockP = acquireWritersLock();
            return acquireWritersLockP.then(([release]) => {
                let released = false;
                return [
                    async () => {
                        if (released)
                            return;
                        released = true;
                        await release();
                        --this._writerCount;
                    },
                    this,
                ];
            }, (e) => {
                --this._writerCount;
                throw e;
            }, (signal) => {
                signal.addEventListener('abort', () => {
                    acquireWritersLockP.cancel(signal.reason);
                }, { once: true });
            });
        };
    }
    waitForUnlock(ctx) {
        const waitReadersLockP = this.readersLock.waitForUnlock(ctx);
        const waitWritersLockP = this.writersLock.waitForUnlock(ctx);
        return async_cancellable_1.PromiseCancellable.all([waitReadersLockP, waitWritersLockP]).then(() => { }, undefined, (signal) => {
            signal.addEventListener('abort', () => {
                waitReadersLockP.cancel(signal.reason);
                waitWritersLockP.cancel(signal.reason);
            }, { once: true });
        });
    }
    withF(...params) {
        let type;
        if (params.length === 2) {
            type = params.shift();
        }
        else {
            if (typeof params[0] === 'string') {
                type = params.shift();
            }
            else if (typeof params[0] == null) {
                params.shift();
            }
        }
        type = type ?? 'write';
        switch (type) {
            case 'read':
                return this.withReadF(...params);
            case 'write':
                return this.withWriteF(...params);
        }
    }
    withReadF(...params) {
        const f = params.pop();
        return (0, resources_1.withF)([this.read(...params)], ([lock]) => f(lock));
    }
    withWriteF(...params) {
        const f = params.pop();
        return (0, resources_1.withF)([this.write(...params)], ([lock]) => f(lock));
    }
    withG(...params) {
        let type;
        if (params.length === 2) {
            type = params.shift();
        }
        else {
            if (typeof params[0] === 'string') {
                type = params.shift();
            }
            else if (typeof params[0] == null) {
                params.shift();
            }
        }
        type = type ?? 'write';
        switch (type) {
            case 'read':
                return this.withReadG(...params);
            case 'write':
                return this.withWriteG(...params);
        }
    }
    withReadG(...params) {
        const g = params.pop();
        return (0, resources_1.withG)([this.read(...params)], ([lock]) => g(lock));
    }
    withWriteG(...params) {
        const g = params.pop();
        return (0, resources_1.withG)([this.write(...params)], ([lock]) => g(lock));
    }
}
exports.default = RWLockReader;
//# sourceMappingURL=RWLockReader.js.map
import { AbstractError } from '@matrixai/errors';
declare class ErrorAsyncLocks<T> extends AbstractError<T> {
    static description: string;
}
declare class ErrorAsyncLocksTimeout<T> extends ErrorAsyncLocks<T> {
    static description: string;
}
declare class ErrorAsyncLocksLockBoxConflict<T> extends ErrorAsyncLocks<T> {
    static description: string;
}
/**
 * If you get this exception, this means within the same `Monitor` instance,
 * you tried to lock a read on a key that is already locked for write, or
 * you tried to lock a write on a key that is already locked for read. This
 * is not supported because to do so would imply a lock upgrade from read to
 * write or from write to read.
 */
declare class ErrorAsyncLocksMonitorLockType<T> extends ErrorAsyncLocks<T> {
    static description: string;
}
declare class ErrorAsyncLocksMonitorDeadlock<T> extends ErrorAsyncLocks<T> {
    static description: string;
}
export { ErrorAsyncLocks, ErrorAsyncLocksTimeout, ErrorAsyncLocksLockBoxConflict, ErrorAsyncLocksMonitorLockType, ErrorAsyncLocksMonitorDeadlock, };

import type { PromiseCancellable } from '@matrixai/async-cancellable';
import type { ResourceAcquireCancellable, Lockable, ContextTimedInput } from './types';
import Semaphore from './Semaphore';
declare class Lock implements Lockable {
    protected semaphore: Semaphore;
    get count(): number;
    isLocked(): boolean;
    lock(ctx?: Partial<ContextTimedInput>): ResourceAcquireCancellable<Lock>;
    waitForUnlock(ctx?: Partial<ContextTimedInput>): PromiseCancellable<void>;
    withF<T>(...params: [
        ...([ctx?: Partial<ContextTimedInput>] | []),
        (lock: Lock) => Promise<T>
    ]): Promise<T>;
    withG<T, TReturn, TNext>(...params: [
        ...([ctx?: Partial<ContextTimedInput>] | []),
        (lock: Lock) => AsyncGenerator<T, TReturn, TNext>
    ]): AsyncGenerator<T, TReturn, TNext>;
}
export default Lock;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonFormatter = exports.formatter = exports.format = exports.data = exports.stack = exports.msg = exports.date = exports.keys = exports.key = exports.level = void 0;
const utils = __importStar(require("./utils"));
const level = Symbol('level');
exports.level = level;
const key = Symbol('key');
exports.key = key;
const keys = Symbol('keys');
exports.keys = keys;
const date = Symbol('date');
exports.date = date;
const msg = Symbol('msg');
exports.msg = msg;
const stack = Symbol('stack');
exports.stack = stack;
const data = Symbol('data');
exports.data = data;
function format(strings, ...values) {
    return (record) => {
        let result = strings[0];
        for (let i = 0; i < values.length; i++) {
            const value = values[i];
            if (value === key) {
                result += record.key;
            }
            else if (value === keys) {
                result += record.keys;
            }
            else if (value === date) {
                result += record.date().toISOString();
            }
            else if (value === msg) {
                if (record.msg != null)
                    result += record.msg;
            }
            else if (value === level) {
                result += utils.levelToString(record.level);
            }
            else if (value === data) {
                result += utils.evalLogData(record.data);
            }
            else if (value === stack) {
                const stack = record.stack();
                if (stack !== '')
                    result += '\n' + stack;
            }
            else {
                result += value.toString();
            }
            result += strings[i + 1];
        }
        return result;
    };
}
exports.format = format;
/**
 * Default formatter
 * This only shows the level, key and msg
 */
const formatter = format `${level}:${key}:${msg}`;
exports.formatter = formatter;
/**
 * Default JSON formatter for structured logging
 * You should replace this with a formatter based on your required schema
 * Note that `LogRecord` contains `LogData`, which may contain lazy values
 * You must use `utils.evalLogData` or `utils.evalLogDataValue` to evaluate
 * the `LogData`
 */
const jsonFormatter = (record) => {
    return JSON.stringify({
        level: utils.levelToString(record.level),
        key: record.key,
        msg: record.msg,
        ...record.data,
    }, utils.evalLogDataValue);
};
exports.jsonFormatter = jsonFormatter;
//# sourceMappingURL=formatting.js.map
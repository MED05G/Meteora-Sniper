import type { POJO, Class } from './types';
import { CustomError } from 'ts-custom-error';
/**
 * Abstract error
 * Intended for further extension
 */
declare class AbstractError<T> extends CustomError {
    /**
     * Static description of exception
     */
    static description: string;
    /**
     * Runtime decoding of JSON POJO to exception instance
     * When overriding this, you cannot use `super.fromJSON`
     * You must write it fully, and use the same type-hacks
     * to support polymorphic `this` in static methods
     * https://github.com/microsoft/TypeScript/issues/5863
     */
    static fromJSON<T extends Class<any>>(this: T, json: any): InstanceType<T>;
    /**
     * Arbitrary data
     */
    data: POJO;
    /**
     * Causation of the exception
     * Can be used to know what caused this exception
     */
    cause: T;
    /**
     * Timestamp when exception was constructed in milliseconds
     * Guaranteed to be weakly monotonic
     */
    timestamp: Date;
    constructor(message?: string, options?: {
        timestamp?: Date;
        data?: POJO;
        cause?: T;
    });
    get description(): string;
    /**
     * Encoding to JSON pojo
     * When overriding this, you can use `super.toJSON`
     * The `replacer` will:
     *  - delete undefined values in objects
     *  - replace undefined values for null in arrays
     */
    toJSON(): any;
}
export default AbstractError;

import type { ResourceAcquire, Resources } from './types';
/**
 * Make sure to explicitly declare or cast `acquires` as a tuple using `[ResourceAcquire...]` or `as const`
 */
declare function withF<ResourceAcquires extends readonly [ResourceAcquire<unknown>] | readonly ResourceAcquire<unknown>[], T>(acquires: ResourceAcquires, f: (resources: Resources<ResourceAcquires>) => Promise<T>): Promise<T>;
/**
 * Make sure to explicitly declare or cast `acquires` as a tuple using `[ResourceAcquire...]` or `as const`
 */
declare function withG<ResourceAcquires extends readonly [ResourceAcquire<unknown>] | readonly ResourceAcquire<unknown>[], T = unknown, TReturn = any, TNext = unknown>(acquires: ResourceAcquires, g: (resources: Resources<ResourceAcquires>) => AsyncGenerator<T, TReturn, TNext>): AsyncGenerator<T, TReturn, TNext>;
export { withF, withG };

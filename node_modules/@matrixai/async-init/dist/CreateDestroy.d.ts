import type { Status, Class } from './types';
import { Evented } from '@matrixai/events';
import { RWLockWriter } from '@matrixai/async-locks';
import { destroyed, status, statusP, initLock } from './utils';
interface CreateDestroy<DestroyReturn = unknown> extends Evented {
    get [destroyed](): boolean;
    get [status](): Status;
    get [statusP](): Promise<Status>;
    readonly [initLock]: RWLockWriter;
    destroy(...args: Array<any>): Promise<DestroyReturn | void>;
}
declare function CreateDestroy<DestroyReturn = unknown>({ eventDestroy, eventDestroyed, }?: {
    eventDestroy?: Class<Event>;
    eventDestroyed?: Class<Event>;
}): <T extends new (...args: any[]) => {
    destroy?(...args: Array<any>): Promise<DestroyReturn | void>;
}>(constructor: T) => (new (...args: Array<any>) => CreateDestroy<DestroyReturn>) & T;
declare function ready(errorDestroyed?: Error, block?: boolean, allowedStatuses?: Array<Status>): (target: any, key: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
export { CreateDestroy, ready, destroyed, status, statusP, initLock };

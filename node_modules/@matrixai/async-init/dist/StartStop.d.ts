import type { Status, Class } from './types';
import { Evented } from '@matrixai/events';
import { RWLockWriter } from '@matrixai/async-locks';
import { running, status, statusP, initLock } from './utils';
interface StartStop<StartReturn = unknown, StopReturn = unknown> extends Evented {
    get [running](): boolean;
    get [status](): Status;
    get [statusP](): Promise<Status>;
    readonly [initLock]: RWLockWriter;
    start(...args: Array<any>): Promise<StartReturn | void>;
    stop(...args: Array<any>): Promise<StopReturn | void>;
}
declare function StartStop<StartReturn = unknown, StopReturn = unknown>({ eventStart, eventStarted, eventStop, eventStopped, }?: {
    eventStart?: Class<Event>;
    eventStarted?: Class<Event>;
    eventStop?: Class<Event>;
    eventStopped?: Class<Event>;
}): <T extends new (...args: Array<any>) => {
    start?(...args: Array<any>): Promise<StartReturn | void>;
    stop?(...args: Array<any>): Promise<StopReturn | void>;
}>(constructor: T) => (new (...args: Array<any>) => StartStop<StartReturn, StopReturn>) & T;
declare function ready(errorNotRunning?: Error, block?: boolean, allowedStatuses?: Array<Status>): (target: any, key: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
export { StartStop, ready, running, status, statusP, initLock };

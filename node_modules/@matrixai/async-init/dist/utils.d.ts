import type { PromiseDeconstructed } from './types';
/**
 * Symbols prevents name clashes with decorated classes
 */
declare const _running: unique symbol;
declare const running: unique symbol;
declare const _destroyed: unique symbol;
declare const destroyed: unique symbol;
declare const _status: unique symbol;
declare const status: unique symbol;
declare const _statusP: unique symbol;
declare const statusP: unique symbol;
declare const resolveStatusP: unique symbol;
declare const initLock: unique symbol;
declare const AsyncFunction: Function;
declare const GeneratorFunction: Function;
declare const AsyncGeneratorFunction: Function;
declare const hasCaptureStackTrace: boolean;
/**
 * Deconstructed promise
 */
declare function promise<T = void>(): PromiseDeconstructed<T>;
/**
 * Ready wrappers take exception objects
 * JS exception traces are created when the exception is instantiated
 * This function rewrites the stack trace according to where the wrapped
 * function is called, giving a more useful stack trace
 */
declare function resetStackTrace(error: Error, decorated?: Function): void;
export { _running, running, _destroyed, destroyed, _status, status, _statusP, statusP, resolveStatusP, initLock, AsyncFunction, GeneratorFunction, AsyncGeneratorFunction, hasCaptureStackTrace, promise, resetStackTrace, };

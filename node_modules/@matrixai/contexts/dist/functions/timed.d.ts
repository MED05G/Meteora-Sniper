import type { ContextTimed, ContextTimedInput } from '../types';
type ContextRemaining<C> = Omit<C, keyof ContextTimedInput>;
type ContextAndParameters<C, P extends Array<any>> = keyof ContextRemaining<C> extends never ? [Partial<ContextTimedInput>?, ...P] : [Partial<ContextTimedInput> & ContextRemaining<C>, ...P];
declare function setupTimedContext(delay: number, errorTimeoutConstructor: new () => Error, ctx: Partial<ContextTimedInput>): () => void;
/**
 * Timed HOF
 * This overloaded signature is external signature
 */
declare function timed<C extends ContextTimedInput, C_ extends ContextTimed, P extends Array<any>, R>(f: (ctx: C_, ...params: P) => R, delay?: number, errorTimeoutConstructor?: new () => Error): (...params: ContextAndParameters<C, P>) => R;
export default timed;
export { setupTimedContext };

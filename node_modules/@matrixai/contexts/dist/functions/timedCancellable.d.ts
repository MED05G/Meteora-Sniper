import type { ContextTimed, ContextTimedInput } from '../types';
import { PromiseCancellable } from '@matrixai/async-cancellable';
type ContextRemaining<C> = Omit<C, keyof ContextTimedInput>;
type ContextAndParameters<C, P extends Array<any>> = keyof ContextRemaining<C> extends never ? [Partial<ContextTimedInput>?, ...P] : [Partial<ContextTimedInput> & ContextRemaining<C>, ...P];
declare function setupTimedCancellable<C extends ContextTimed, P extends Array<any>, R>(f: (ctx: C, ...params: P) => PromiseLike<R>, lazy: boolean, delay: number, errorTimeoutConstructor: new () => Error, ctx: Partial<ContextTimedInput>, args: P): PromiseCancellable<R>;
declare function timedCancellable<C extends ContextTimedInput, C_ extends ContextTimed, P extends Array<any>, R>(f: (ctx: C_, ...params: P) => PromiseLike<R>, lazy?: boolean, delay?: number, errorTimeoutConstructor?: new () => Error): (...params: ContextAndParameters<C, P>) => PromiseCancellable<R>;
export default timedCancellable;
export { setupTimedCancellable };

import type { ContextCancellable } from '../types';
import { PromiseCancellable } from '@matrixai/async-cancellable';
type ContextRemaining<C> = Omit<C, keyof ContextCancellable>;
type ContextAndParameters<C, P extends Array<any>> = keyof ContextRemaining<C> extends never ? [Partial<ContextCancellable>?, ...P] : [Partial<ContextCancellable> & ContextRemaining<C>, ...P];
declare function setupCancellable<C extends ContextCancellable, P extends Array<any>, R>(f: (ctx: C, ...params: P) => PromiseLike<R>, lazy: boolean, ctx: Partial<ContextCancellable>, args: P): PromiseCancellable<R>;
declare function cancellable<C extends ContextCancellable, P extends Array<any>, R>(f: (ctx: C, ...params: P) => PromiseLike<R>, lazy?: boolean): (...params: ContextAndParameters<C, P>) => PromiseCancellable<R>;
export default cancellable;
export { setupCancellable };

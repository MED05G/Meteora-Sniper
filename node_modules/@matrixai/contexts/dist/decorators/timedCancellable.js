"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const timedCancellable_1 = require("../functions/timedCancellable");
const utils = __importStar(require("../utils"));
const errors = __importStar(require("../errors"));
function timedCancellable(lazy = false, delay = Infinity, errorTimeoutConstructor = errors.ErrorContextsTimedTimeOut) {
    return (target, key, descriptor) => {
        // Target is instance prototype for instance methods
        // or the class prototype for static methods
        const targetName = target['name'] ?? target.constructor.name;
        const f = descriptor['value'];
        if (typeof f !== 'function') {
            throw new TypeError(`\`${targetName}.${key.toString()}\` is not a function`);
        }
        const contextIndex = utils.getContextIndex(target, key, targetName);
        descriptor['value'] = function (...args) {
            let ctx = args[contextIndex];
            if (ctx === undefined) {
                ctx = {};
            }
            else {
                // Copy the ctx into a new ctx object to avoid mutating the ctx in case
                // it is used again
                ctx = { ...ctx };
            }
            args[contextIndex] = ctx;
            // Runtime type check on the context parameter
            utils.checkContextTimed(ctx, key, targetName);
            const lazy_ = typeof lazy === 'boolean' ? lazy : lazy(this);
            const delay_ = typeof delay === 'number' ? delay : delay(this);
            return (0, timedCancellable_1.setupTimedCancellable)((_, ...args) => f.apply(this, args), lazy_, delay_, errorTimeoutConstructor, ctx, args);
        };
        // Preserve the name
        Object.defineProperty(descriptor['value'], 'name', {
            value: typeof key === 'symbol' ? `[${key.description}]` : key,
        });
        return descriptor;
    };
}
exports.default = timedCancellable;
//# sourceMappingURL=timedCancellable.js.map
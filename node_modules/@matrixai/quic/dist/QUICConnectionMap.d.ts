import type QUICConnection from './QUICConnection';
import QUICConnectionId from './QUICConnectionId';
declare class QUICConnectionMap implements Map<QUICConnectionId, QUICConnection> {
    [Symbol.toStringTag]: string;
    protected _serverConnections: Map<string, QUICConnection>;
    protected _clientConnections: Map<string, QUICConnection>;
    constructor(connections?: Iterable<readonly [QUICConnectionId, QUICConnection]>);
    get size(): number;
    /**
     * Gets the server connections.
     * This uses `ConnectionIdString` because it is too complex to map
     * `ConnectionId` to `ConnectionIdString` and back.
     */
    get serverConnections(): ReadonlyMap<string, QUICConnection>;
    /**
     * Gets the client connections.
     * This uses `ConnectionIdString` because it is too complex to map
     * `ConnectionId` to `ConnectionIdString` and back.
     */
    get clientConnections(): ReadonlyMap<string, QUICConnection>;
    has(connectionId: QUICConnectionId): boolean;
    get(connectionId: QUICConnectionId): QUICConnection | undefined;
    set(connectionId: QUICConnectionId, connection: QUICConnection): this;
    delete(connectionId: QUICConnectionId): boolean;
    clear(): void;
    forEach(callback: (value: QUICConnection, key: QUICConnectionId, map: Map<QUICConnectionId, QUICConnection>) => void, thisArg?: any): void;
    [Symbol.iterator](): IterableIterator<[
        QUICConnectionId,
        QUICConnection
    ]>;
    entries(): IterableIterator<[QUICConnectionId, QUICConnection]>;
    keys(): IterableIterator<QUICConnectionId>;
    values(): IterableIterator<QUICConnection>;
}
export default QUICConnectionMap;

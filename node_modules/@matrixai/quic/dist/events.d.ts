import type QUICConnection from './QUICConnection';
import type QUICStream from './QUICStream';
import type { ErrorQUICConnectionLocal, ErrorQUICConnectionPeer, ErrorQUICConnectionInternal, ErrorQUICStreamLocalRead, ErrorQUICStreamLocalWrite, ErrorQUICStreamPeerRead, ErrorQUICStreamPeerWrite, ErrorQUICStreamInternal, ErrorQUICConnectionIdleTimeout, ErrorQUICSocketInternal, ErrorQUICServerInternal, ErrorQUICServerSocketNotRunning, ErrorQUICClientSocketNotRunning, ErrorQUICClientInternal } from './errors';
import { AbstractEvent } from '@matrixai/events';
declare abstract class EventQUIC<T = undefined> extends AbstractEvent<T> {
}
declare abstract class EventQUICSocket<T = undefined> extends EventQUIC<T> {
}
declare class EventQUICSocketStart extends EventQUICSocket {
}
declare class EventQUICSocketStarted extends EventQUICSocket {
}
declare class EventQUICSocketStop extends EventQUICSocket {
}
declare class EventQUICSocketStopped extends EventQUICSocket {
}
declare class EventQUICSocketError extends EventQUICSocket<ErrorQUICSocketInternal<unknown>> {
}
declare class EventQUICSocketClose extends EventQUICSocket<ErrorQUICSocketInternal<unknown> | undefined> {
}
declare abstract class EventQUICClient<T = undefined> extends EventQUIC<T> {
}
declare class EventQUICClientDestroy extends EventQUICClient {
}
declare class EventQUICClientDestroyed extends EventQUICClient {
}
/**
 * All `EventQUICConnectionError` errors is also `EventQUICClient` errors.
 * This is because `QUICClient` is 1 to 1 to `QUICConnection`.
 * It's thin wrapper around it.
 */
declare class EventQUICClientError extends EventQUICClient<ErrorQUICClientSocketNotRunning<unknown> | ErrorQUICClientInternal<unknown> | ErrorQUICConnectionLocal<unknown> | ErrorQUICConnectionPeer<unknown> | ErrorQUICConnectionIdleTimeout<unknown> | ErrorQUICConnectionInternal<unknown>> {
}
declare class EventQUICClientErrorSend extends EventQUICSocket<Error> {
}
declare class EventQUICClientClose extends EventQUICClient<ErrorQUICClientSocketNotRunning<unknown> | ErrorQUICConnectionLocal<unknown> | ErrorQUICConnectionPeer<unknown> | ErrorQUICConnectionIdleTimeout<unknown>> {
}
declare abstract class EventQUICServer<T = undefined> extends EventQUIC<T> {
}
declare class EventQUICServerConnection extends EventQUICServer<QUICConnection> {
}
declare class EventQUICServerStart extends EventQUICServer {
}
declare class EventQUICServerStarted extends EventQUICServer {
}
declare class EventQUICServerStop extends EventQUICServer {
}
declare class EventQUICServerStopped extends EventQUICServer {
}
declare class EventQUICServerError extends EventQUICServer<ErrorQUICServerSocketNotRunning<unknown> | ErrorQUICServerInternal<unknown>> {
}
declare class EventQUICServerClose extends EventQUICServer<ErrorQUICServerSocketNotRunning<unknown> | undefined> {
}
declare abstract class EventQUICConnection<T = undefined> extends EventQUIC<T> {
}
declare class EventQUICConnectionStart extends EventQUICConnection {
}
declare class EventQUICConnectionStarted extends EventQUICConnection {
}
declare class EventQUICConnectionStop extends EventQUICConnection {
}
declare class EventQUICConnectionStopped extends EventQUICConnection {
}
/**
 * Closing a quic connection is always an error no matter if it is graceful or
 * not. This is due to the utilisation of the error code and reason during
 * connection close. Additionally it is also possible that that the QUIC
 * connection times out. In this case, quiche does will not send a
 * `CONNECTION_CLOSE` frame.
 */
declare class EventQUICConnectionError extends EventQUICConnection<ErrorQUICConnectionLocal<unknown> | ErrorQUICConnectionPeer<unknown> | ErrorQUICConnectionIdleTimeout<unknown> | ErrorQUICConnectionInternal<unknown>> {
}
declare class EventQUICConnectionClose extends EventQUICConnection<ErrorQUICConnectionLocal<unknown> | ErrorQUICConnectionPeer<unknown> | ErrorQUICConnectionIdleTimeout<unknown>> {
}
declare class EventQUICConnectionStream extends EventQUICConnection<QUICStream> {
}
declare class EventQUICConnectionSend extends EventQUICConnection<{
    id: string;
    msg: Uint8Array;
    port: number;
    address: string;
}> {
}
declare abstract class EventQUICStream<T = undefined> extends EventQUIC<T> {
}
declare class EventQUICStreamDestroy extends EventQUICStream {
}
declare class EventQUICStreamDestroyed extends EventQUICStream {
}
/**
 * Gracefully closing a QUIC stream does not require an error event.
 */
declare class EventQUICStreamError extends EventQUICStream<ErrorQUICStreamLocalRead<unknown> | ErrorQUICStreamLocalWrite<unknown> | ErrorQUICStreamPeerRead<unknown> | ErrorQUICStreamPeerWrite<unknown> | ErrorQUICStreamInternal<unknown>> {
}
/**
 * QUIC stream readable side is closed.
 *
 * `ErrorQUICStreamLocalRead` - readable side cancelled locally with code.
 * `ErrorQUICStreamPeerRead` - readable side cancelled by peer aborting the
 *                             remote writable side.
 * `undefined` - readable side closed gracefully.
 */
declare class EventQUICStreamCloseRead extends EventQUICStream<ErrorQUICStreamLocalRead<unknown> | ErrorQUICStreamPeerRead<unknown> | undefined> {
}
/**
 * QUIC stream writable side is closed.
 *
 * `ErrorQUICStreamLocalWrite` - writable side aborted locally with code.
 * `ErrorQUICStreamPeerWrite` - writable side aborted by peer cancelling the
 *                             remote readable side.
 * `undefined` - writable side closed gracefully.
 */
declare class EventQUICStreamCloseWrite extends EventQUICStream<ErrorQUICStreamLocalWrite<unknown> | ErrorQUICStreamPeerWrite<unknown> | undefined> {
}
declare class EventQUICStreamSend extends EventQUICStream {
}
export { EventQUIC, EventQUICSocket, EventQUICSocketStart, EventQUICSocketStarted, EventQUICSocketStop, EventQUICSocketStopped, EventQUICSocketError, EventQUICSocketClose, EventQUICClient, EventQUICClientDestroy, EventQUICClientDestroyed, EventQUICClientError, EventQUICClientErrorSend, EventQUICClientClose, EventQUICServer, EventQUICServerStart, EventQUICServerStarted, EventQUICServerStop, EventQUICServerStopped, EventQUICServerError, EventQUICServerClose, EventQUICServerConnection, EventQUICConnection, EventQUICConnectionStart, EventQUICConnectionStarted, EventQUICConnectionStop, EventQUICConnectionStopped, EventQUICConnectionError, EventQUICConnectionClose, EventQUICConnectionStream, EventQUICConnectionSend, EventQUICStream, EventQUICStreamDestroy, EventQUICStreamDestroyed, EventQUICStreamError, EventQUICStreamCloseRead, EventQUICStreamCloseWrite, EventQUICStreamSend, };

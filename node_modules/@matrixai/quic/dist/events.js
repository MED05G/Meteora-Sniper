"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventQUICStreamSend = exports.EventQUICStreamCloseWrite = exports.EventQUICStreamCloseRead = exports.EventQUICStreamError = exports.EventQUICStreamDestroyed = exports.EventQUICStreamDestroy = exports.EventQUICStream = exports.EventQUICConnectionSend = exports.EventQUICConnectionStream = exports.EventQUICConnectionClose = exports.EventQUICConnectionError = exports.EventQUICConnectionStopped = exports.EventQUICConnectionStop = exports.EventQUICConnectionStarted = exports.EventQUICConnectionStart = exports.EventQUICConnection = exports.EventQUICServerConnection = exports.EventQUICServerClose = exports.EventQUICServerError = exports.EventQUICServerStopped = exports.EventQUICServerStop = exports.EventQUICServerStarted = exports.EventQUICServerStart = exports.EventQUICServer = exports.EventQUICClientClose = exports.EventQUICClientErrorSend = exports.EventQUICClientError = exports.EventQUICClientDestroyed = exports.EventQUICClientDestroy = exports.EventQUICClient = exports.EventQUICSocketClose = exports.EventQUICSocketError = exports.EventQUICSocketStopped = exports.EventQUICSocketStop = exports.EventQUICSocketStarted = exports.EventQUICSocketStart = exports.EventQUICSocket = exports.EventQUIC = void 0;
const events_1 = require("@matrixai/events");
class EventQUIC extends events_1.AbstractEvent {
}
exports.EventQUIC = EventQUIC;
// Socket events
class EventQUICSocket extends EventQUIC {
}
exports.EventQUICSocket = EventQUICSocket;
class EventQUICSocketStart extends EventQUICSocket {
}
exports.EventQUICSocketStart = EventQUICSocketStart;
class EventQUICSocketStarted extends EventQUICSocket {
}
exports.EventQUICSocketStarted = EventQUICSocketStarted;
class EventQUICSocketStop extends EventQUICSocket {
}
exports.EventQUICSocketStop = EventQUICSocketStop;
class EventQUICSocketStopped extends EventQUICSocket {
}
exports.EventQUICSocketStopped = EventQUICSocketStopped;
class EventQUICSocketError extends EventQUICSocket {
}
exports.EventQUICSocketError = EventQUICSocketError;
class EventQUICSocketClose extends EventQUICSocket {
}
exports.EventQUICSocketClose = EventQUICSocketClose;
// Client events
class EventQUICClient extends EventQUIC {
}
exports.EventQUICClient = EventQUICClient;
class EventQUICClientDestroy extends EventQUICClient {
}
exports.EventQUICClientDestroy = EventQUICClientDestroy;
class EventQUICClientDestroyed extends EventQUICClient {
}
exports.EventQUICClientDestroyed = EventQUICClientDestroyed;
/**
 * All `EventQUICConnectionError` errors is also `EventQUICClient` errors.
 * This is because `QUICClient` is 1 to 1 to `QUICConnection`.
 * It's thin wrapper around it.
 */
class EventQUICClientError extends EventQUICClient {
}
exports.EventQUICClientError = EventQUICClientError;
class EventQUICClientErrorSend extends EventQUICSocket {
}
exports.EventQUICClientErrorSend = EventQUICClientErrorSend;
class EventQUICClientClose extends EventQUICClient {
}
exports.EventQUICClientClose = EventQUICClientClose;
// Server events
class EventQUICServer extends EventQUIC {
}
exports.EventQUICServer = EventQUICServer;
class EventQUICServerConnection extends EventQUICServer {
}
exports.EventQUICServerConnection = EventQUICServerConnection;
class EventQUICServerStart extends EventQUICServer {
}
exports.EventQUICServerStart = EventQUICServerStart;
class EventQUICServerStarted extends EventQUICServer {
}
exports.EventQUICServerStarted = EventQUICServerStarted;
class EventQUICServerStop extends EventQUICServer {
}
exports.EventQUICServerStop = EventQUICServerStop;
class EventQUICServerStopped extends EventQUICServer {
}
exports.EventQUICServerStopped = EventQUICServerStopped;
class EventQUICServerError extends EventQUICServer {
}
exports.EventQUICServerError = EventQUICServerError;
class EventQUICServerClose extends EventQUICServer {
}
exports.EventQUICServerClose = EventQUICServerClose;
// Connection events
class EventQUICConnection extends EventQUIC {
}
exports.EventQUICConnection = EventQUICConnection;
class EventQUICConnectionStart extends EventQUICConnection {
}
exports.EventQUICConnectionStart = EventQUICConnectionStart;
class EventQUICConnectionStarted extends EventQUICConnection {
}
exports.EventQUICConnectionStarted = EventQUICConnectionStarted;
class EventQUICConnectionStop extends EventQUICConnection {
}
exports.EventQUICConnectionStop = EventQUICConnectionStop;
class EventQUICConnectionStopped extends EventQUICConnection {
}
exports.EventQUICConnectionStopped = EventQUICConnectionStopped;
/**
 * Closing a quic connection is always an error no matter if it is graceful or
 * not. This is due to the utilisation of the error code and reason during
 * connection close. Additionally it is also possible that that the QUIC
 * connection times out. In this case, quiche does will not send a
 * `CONNECTION_CLOSE` frame.
 */
class EventQUICConnectionError extends EventQUICConnection {
}
exports.EventQUICConnectionError = EventQUICConnectionError;
class EventQUICConnectionClose extends EventQUICConnection {
}
exports.EventQUICConnectionClose = EventQUICConnectionClose;
class EventQUICConnectionStream extends EventQUICConnection {
}
exports.EventQUICConnectionStream = EventQUICConnectionStream;
class EventQUICConnectionSend extends EventQUICConnection {
}
exports.EventQUICConnectionSend = EventQUICConnectionSend;
// Stream events
class EventQUICStream extends EventQUIC {
}
exports.EventQUICStream = EventQUICStream;
class EventQUICStreamDestroy extends EventQUICStream {
}
exports.EventQUICStreamDestroy = EventQUICStreamDestroy;
class EventQUICStreamDestroyed extends EventQUICStream {
}
exports.EventQUICStreamDestroyed = EventQUICStreamDestroyed;
/**
 * Gracefully closing a QUIC stream does not require an error event.
 */
class EventQUICStreamError extends EventQUICStream {
}
exports.EventQUICStreamError = EventQUICStreamError;
/**
 * QUIC stream readable side is closed.
 *
 * `ErrorQUICStreamLocalRead` - readable side cancelled locally with code.
 * `ErrorQUICStreamPeerRead` - readable side cancelled by peer aborting the
 *                             remote writable side.
 * `undefined` - readable side closed gracefully.
 */
class EventQUICStreamCloseRead extends EventQUICStream {
}
exports.EventQUICStreamCloseRead = EventQUICStreamCloseRead;
/**
 * QUIC stream writable side is closed.
 *
 * `ErrorQUICStreamLocalWrite` - writable side aborted locally with code.
 * `ErrorQUICStreamPeerWrite` - writable side aborted by peer cancelling the
 *                             remote readable side.
 * `undefined` - writable side closed gracefully.
 */
class EventQUICStreamCloseWrite extends EventQUICStream {
}
exports.EventQUICStreamCloseWrite = EventQUICStreamCloseWrite;
class EventQUICStreamSend extends EventQUICStream {
}
exports.EventQUICStreamSend = EventQUICStreamSend;
//# sourceMappingURL=events.js.map
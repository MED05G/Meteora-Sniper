"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorQUICStreamLimit = exports.ErrorQUICStreamInternal = exports.ErrorQUICStreamPeerWrite = exports.ErrorQUICStreamPeerRead = exports.ErrorQUICStreamLocalWrite = exports.ErrorQUICStreamLocalRead = exports.ErrorQUICStreamDestroyed = exports.ErrorQUICStream = exports.ErrorQUICConnectionInternal = exports.ErrorQUICConnectionIdleTimeout = exports.ErrorQUICConnectionPeerTLS = exports.ErrorQUICConnectionPeer = exports.ErrorQUICConnectionLocalTLS = exports.ErrorQUICConnectionLocal = exports.ErrorQUICConnectionConfigInvalid = exports.ErrorQUICConnectionStartTimeout = exports.ErrorQUICConnectionStartData = exports.ErrorQUICConnectionClosed = exports.ErrorQUICConnectionNotRunning = exports.ErrorQUICConnectionStopping = exports.ErrorQUICConnection = exports.ErrorQUICServerStopping = exports.ErrorQUICServerInternal = exports.ErrorQUICServerNewConnection = exports.ErrorQUICServerSocketNotRunning = exports.ErrorQUICServerNotRunning = exports.ErrorQUICServer = exports.ErrorQUICClientInternal = exports.ErrorQUICClientInvalidHost = exports.ErrorQUICClientInvalidArgument = exports.ErrorQUICClientSocketNotRunning = exports.ErrorQUICClientCreateTimeout = exports.ErrorQUICClientDestroyed = exports.ErrorQUICClient = exports.ErrorQUICSocketInternal = exports.ErrorQUICSocketInvalidSendAddress = exports.ErrorQUICSocketInvalidBindAddress = exports.ErrorQUICSocketConnectionsActive = exports.ErrorQUICSocketNotRunning = exports.ErrorQUICSocket = exports.ErrorQUICConfig = exports.ErrorQUICPortInvalid = exports.ErrorQUICHostInvalid = exports.ErrorQUICUndefinedBehaviour = exports.ErrorQUIC = void 0;
const AbstractError_1 = __importDefault(require("@matrixai/errors/dist/AbstractError"));
class ErrorQUIC extends AbstractError_1.default {
    static description = 'QUIC error';
}
exports.ErrorQUIC = ErrorQUIC;
class ErrorQUICUndefinedBehaviour extends AbstractError_1.default {
    static description = 'You should never see this error';
}
exports.ErrorQUICUndefinedBehaviour = ErrorQUICUndefinedBehaviour;
class ErrorQUICHostInvalid extends AbstractError_1.default {
    static description = 'Host provided was not valid';
}
exports.ErrorQUICHostInvalid = ErrorQUICHostInvalid;
class ErrorQUICPortInvalid extends AbstractError_1.default {
    static description = 'Port provided was not valid';
}
exports.ErrorQUICPortInvalid = ErrorQUICPortInvalid;
class ErrorQUICConfig extends ErrorQUIC {
    static description = 'QUIC config error';
}
exports.ErrorQUICConfig = ErrorQUICConfig;
class ErrorQUICSocket extends ErrorQUIC {
    static description = 'QUIC Socket error';
}
exports.ErrorQUICSocket = ErrorQUICSocket;
class ErrorQUICSocketNotRunning extends ErrorQUICSocket {
    static description = 'QUIC Socket is not running';
}
exports.ErrorQUICSocketNotRunning = ErrorQUICSocketNotRunning;
class ErrorQUICSocketConnectionsActive extends ErrorQUICSocket {
    static description = 'QUIC Socket has active connections';
}
exports.ErrorQUICSocketConnectionsActive = ErrorQUICSocketConnectionsActive;
class ErrorQUICSocketInvalidBindAddress extends ErrorQUICSocket {
    static description = 'QUIC Socket cannot bind to the specified address';
}
exports.ErrorQUICSocketInvalidBindAddress = ErrorQUICSocketInvalidBindAddress;
class ErrorQUICSocketInvalidSendAddress extends ErrorQUICSocket {
    static description = 'QUIC Socket cannot send to the specified address';
}
exports.ErrorQUICSocketInvalidSendAddress = ErrorQUICSocketInvalidSendAddress;
class ErrorQUICSocketInternal extends ErrorQUICSocket {
    static description = 'QUIC Socket internal error';
}
exports.ErrorQUICSocketInternal = ErrorQUICSocketInternal;
class ErrorQUICClient extends ErrorQUIC {
    static description = 'QUIC Client error';
}
exports.ErrorQUICClient = ErrorQUICClient;
class ErrorQUICClientDestroyed extends ErrorQUICClient {
    static description = 'QUIC Client is destroyed';
}
exports.ErrorQUICClientDestroyed = ErrorQUICClientDestroyed;
class ErrorQUICClientCreateTimeout extends ErrorQUICClient {
    static description = 'QUIC Client create timeout';
}
exports.ErrorQUICClientCreateTimeout = ErrorQUICClientCreateTimeout;
class ErrorQUICClientSocketNotRunning extends ErrorQUICClient {
    static description = 'QUIC Client cannot be created with an unstarted shared QUIC socket';
}
exports.ErrorQUICClientSocketNotRunning = ErrorQUICClientSocketNotRunning;
class ErrorQUICClientInvalidArgument extends ErrorQUICClient {
    static description = 'QUIC Client had a failure relating to an invalid argument';
}
exports.ErrorQUICClientInvalidArgument = ErrorQUICClientInvalidArgument;
class ErrorQUICClientInvalidHost extends ErrorQUICClient {
    static description = 'QUIC Client cannot be created with the specified host';
}
exports.ErrorQUICClientInvalidHost = ErrorQUICClientInvalidHost;
class ErrorQUICClientInternal extends ErrorQUICClient {
    static description = 'QUIC Client internal error';
}
exports.ErrorQUICClientInternal = ErrorQUICClientInternal;
class ErrorQUICServer extends ErrorQUIC {
    static description = 'QUIC Server error';
}
exports.ErrorQUICServer = ErrorQUICServer;
class ErrorQUICServerNotRunning extends ErrorQUICServer {
    static description = 'QUIC Server is not running';
}
exports.ErrorQUICServerNotRunning = ErrorQUICServerNotRunning;
class ErrorQUICServerSocketNotRunning extends ErrorQUICServer {
    static description = 'QUIC Server cannot start with an unstarted shared QUIC socket';
}
exports.ErrorQUICServerSocketNotRunning = ErrorQUICServerSocketNotRunning;
class ErrorQUICServerNewConnection extends ErrorQUICServer {
    static description = 'QUIC Server creating a new connection';
}
exports.ErrorQUICServerNewConnection = ErrorQUICServerNewConnection;
class ErrorQUICServerInternal extends ErrorQUICServer {
    static description = 'QUIC Server internal error';
}
exports.ErrorQUICServerInternal = ErrorQUICServerInternal;
class ErrorQUICServerStopping extends ErrorQUICServer {
    static description = 'QUIC Server is stopping';
}
exports.ErrorQUICServerStopping = ErrorQUICServerStopping;
class ErrorQUICConnection extends ErrorQUIC {
    static description = 'QUIC Connection error';
}
exports.ErrorQUICConnection = ErrorQUICConnection;
class ErrorQUICConnectionStopping extends ErrorQUICConnection {
    static description = 'QUIC Connection is stopping';
}
exports.ErrorQUICConnectionStopping = ErrorQUICConnectionStopping;
class ErrorQUICConnectionNotRunning extends ErrorQUICConnection {
    static description = 'QUIC Connection is not running';
}
exports.ErrorQUICConnectionNotRunning = ErrorQUICConnectionNotRunning;
class ErrorQUICConnectionClosed extends ErrorQUICConnection {
    static description = 'QUIC Connection cannot be restarted because it has already been closed';
}
exports.ErrorQUICConnectionClosed = ErrorQUICConnectionClosed;
class ErrorQUICConnectionStartData extends ErrorQUIC {
    static description = 'QUIC Connection start requires data when it is a server connection';
}
exports.ErrorQUICConnectionStartData = ErrorQUICConnectionStartData;
class ErrorQUICConnectionStartTimeout extends ErrorQUICConnection {
    static description = 'QUIC Connection start timeout';
}
exports.ErrorQUICConnectionStartTimeout = ErrorQUICConnectionStartTimeout;
class ErrorQUICConnectionConfigInvalid extends ErrorQUICConnection {
    static description = 'QUIC connection invalid configuration';
}
exports.ErrorQUICConnectionConfigInvalid = ErrorQUICConnectionConfigInvalid;
class ErrorQUICConnectionLocal extends ErrorQUICConnection {
    static description = 'QUIC Connection local error';
    constructor(message = '', options) {
        super(message, options);
    }
}
exports.ErrorQUICConnectionLocal = ErrorQUICConnectionLocal;
class ErrorQUICConnectionLocalTLS extends ErrorQUICConnectionLocal {
    static description = 'QUIC Connection local TLS error';
    constructor(message = '', options) {
        super(message, options);
    }
}
exports.ErrorQUICConnectionLocalTLS = ErrorQUICConnectionLocalTLS;
class ErrorQUICConnectionPeer extends ErrorQUICConnection {
    static description = 'QUIC Connection peer error';
    constructor(message = '', options) {
        super(message, options);
    }
}
exports.ErrorQUICConnectionPeer = ErrorQUICConnectionPeer;
class ErrorQUICConnectionPeerTLS extends ErrorQUICConnectionLocal {
    static description = 'QUIC Connection local TLS error';
    constructor(message = '', options) {
        super(message, options);
    }
}
exports.ErrorQUICConnectionPeerTLS = ErrorQUICConnectionPeerTLS;
class ErrorQUICConnectionIdleTimeout extends ErrorQUICConnection {
    static description = 'QUIC Connection max idle timeout exhausted';
}
exports.ErrorQUICConnectionIdleTimeout = ErrorQUICConnectionIdleTimeout;
class ErrorQUICConnectionInternal extends ErrorQUICConnection {
    static description = 'QUIC Connection internal error';
}
exports.ErrorQUICConnectionInternal = ErrorQUICConnectionInternal;
class ErrorQUICStream extends ErrorQUIC {
    static description = 'QUIC Stream error';
}
exports.ErrorQUICStream = ErrorQUICStream;
class ErrorQUICStreamDestroyed extends ErrorQUICStream {
    static description = 'QUIC Stream is destroyed';
}
exports.ErrorQUICStreamDestroyed = ErrorQUICStreamDestroyed;
class ErrorQUICStreamLocalRead extends ErrorQUICStream {
    static description = 'QUIC Stream locally closed readable side';
    constructor(message = '', options) {
        super(message, options);
    }
}
exports.ErrorQUICStreamLocalRead = ErrorQUICStreamLocalRead;
class ErrorQUICStreamLocalWrite extends ErrorQUICStream {
    static description = 'QUIC Stream locally closed writable side';
    constructor(message = '', options) {
        super(message, options);
    }
}
exports.ErrorQUICStreamLocalWrite = ErrorQUICStreamLocalWrite;
class ErrorQUICStreamPeerRead extends ErrorQUICStream {
    static description = 'QUIC Stream peer closed readable side';
    constructor(message = '', options) {
        super(message, options);
    }
}
exports.ErrorQUICStreamPeerRead = ErrorQUICStreamPeerRead;
class ErrorQUICStreamPeerWrite extends ErrorQUICStream {
    static description = 'QUIC Stream peer closed writable side';
    constructor(message = '', options) {
        super(message, options);
    }
}
exports.ErrorQUICStreamPeerWrite = ErrorQUICStreamPeerWrite;
class ErrorQUICStreamInternal extends ErrorQUICStream {
    static description = 'QUIC Stream internal error';
}
exports.ErrorQUICStreamInternal = ErrorQUICStreamInternal;
class ErrorQUICStreamLimit extends ErrorQUICStream {
    static description = 'QUIC Stream limit has been reached';
}
exports.ErrorQUICStreamLimit = ErrorQUICStreamLimit;
//# sourceMappingURL=errors.js.map
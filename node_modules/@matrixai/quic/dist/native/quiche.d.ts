/**
 * JS binding to NAPI quiche dynamic library.
 * This code was derived from the auto-generated binding and declaration
 * files provided by napi-rs.
 */
import type { ConnectionErrorCode, CongestionControlAlgorithm, Shutdown, Type, ConfigConstructor, ConnectionConstructor, HeaderConstructor } from './types';
interface Quiche {
    MAX_CONN_ID_LEN: number;
    MIN_CLIENT_INITIAL_LEN: number;
    PROTOCOL_VERSION: number;
    MAX_DATAGRAM_SIZE: number;
    MAX_UDP_PACKET_SIZE: number;
    MAX_STREAM_WINDOW: number;
    MAX_CONNECTION_WINDOW: number;
    CRYPTO_ERROR_START: number;
    CRYPTO_ERROR_STOP: number;
    CongestionControlAlgorithm: typeof CongestionControlAlgorithm;
    Shutdown: typeof Shutdown;
    Type: typeof Type;
    ConnectionErrorCode: typeof ConnectionErrorCode;
    negotiateVersion(scid: Uint8Array, dcid: Uint8Array, data: Uint8Array): number;
    retry(scid: Uint8Array, dcid: Uint8Array, newScid: Uint8Array, token: Uint8Array, version: number, out: Uint8Array): number;
    versionIsSupported(version: number): boolean;
    Config: ConfigConstructor;
    Connection: ConnectionConstructor;
    Header: HeaderConstructor;
}
declare let nativeBinding: Quiche;
export default nativeBinding;
export type { Quiche };

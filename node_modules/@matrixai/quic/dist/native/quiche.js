"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = __importDefault(require("process"));
const path_1 = __importDefault(require("path"));
const projectRoot = path_1.default.join(__dirname, '../../');
const prebuildPath = path_1.default.join(projectRoot, 'prebuild');
/**
 * Try require on all prebuild targets first, then
 * try require on all npm targets second.
 */
function requireBinding(targets) {
    const prebuildTargets = targets.map((target) => path_1.default.join(prebuildPath, `quic-${target}.node`));
    for (const prebuildTarget of prebuildTargets) {
        try {
            return require(prebuildTarget);
        }
        catch (e) {
            if (e.code !== 'MODULE_NOT_FOUND')
                throw e;
        }
    }
    const npmTargets = targets.map((target) => `@matrixai/quic-${target}`);
    for (const npmTarget of npmTargets) {
        try {
            return require(npmTarget);
        }
        catch (e) {
            if (e.code !== 'MODULE_NOT_FOUND')
                throw e;
        }
    }
    throw new Error(`Failed requiring possible native bindings: ${prebuildTargets.concat(npmTargets)}`);
}
let nativeBinding;
/**
 * For desktop we only support win32, darwin and linux.
 * Mobile OS support is pending.
 */
switch (process_1.default.platform) {
    case 'win32':
        switch (process_1.default.arch) {
            case 'x64':
                nativeBinding = requireBinding(['win32-x64']);
                break;
            case 'ia32':
                nativeBinding = requireBinding(['win32-ia32']);
                break;
            case 'arm64':
                nativeBinding = requireBinding(['win32-arm64']);
                break;
            default:
                throw new Error(`Unsupported architecture on Windows: ${process_1.default.arch}`);
        }
        break;
    case 'darwin':
        switch (process_1.default.arch) {
            case 'x64':
                nativeBinding = requireBinding([
                    'darwin-x64',
                    'darwin-x64+arm64',
                    'darwin-arm64+x64',
                    'darwin-universal',
                ]);
                break;
            case 'arm64':
                nativeBinding = requireBinding([
                    'darwin-arm64',
                    'darwin-arm64+x64',
                    'darwin-x64+arm64',
                    'darwin-universal',
                ]);
                break;
            default:
                throw new Error(`Unsupported architecture on macOS: ${process_1.default.arch}`);
        }
        break;
    case 'linux':
        switch (process_1.default.arch) {
            case 'x64':
                nativeBinding = requireBinding(['linux-x64']);
                break;
            case 'arm64':
                nativeBinding = requireBinding(['linux-arm64']);
                break;
            case 'arm':
                nativeBinding = requireBinding(['linux-arm']);
                break;
            default:
                throw new Error(`Unsupported architecture on Linux: ${process_1.default.arch}`);
        }
        break;
    default:
        throw new Error(`Unsupported OS: ${process_1.default.platform}, architecture: ${process_1.default.arch}`);
}
exports.default = nativeBinding;
//# sourceMappingURL=quiche.js.map
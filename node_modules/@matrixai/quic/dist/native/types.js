"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CryptoError = exports.ConnectionErrorCode = exports.Type = exports.Shutdown = exports.CongestionControlAlgorithm = void 0;
var CongestionControlAlgorithm;
(function (CongestionControlAlgorithm) {
    CongestionControlAlgorithm[CongestionControlAlgorithm["Reno"] = 0] = "Reno";
    CongestionControlAlgorithm[CongestionControlAlgorithm["CUBIC"] = 1] = "CUBIC";
    CongestionControlAlgorithm[CongestionControlAlgorithm["BBR"] = 2] = "BBR";
})(CongestionControlAlgorithm || (exports.CongestionControlAlgorithm = CongestionControlAlgorithm = {}));
var Shutdown;
(function (Shutdown) {
    Shutdown[Shutdown["Read"] = 0] = "Read";
    Shutdown[Shutdown["Write"] = 1] = "Write";
})(Shutdown || (exports.Shutdown = Shutdown = {}));
var Type;
(function (Type) {
    Type[Type["Initial"] = 0] = "Initial";
    Type[Type["Retry"] = 1] = "Retry";
    Type[Type["Handshake"] = 2] = "Handshake";
    Type[Type["ZeroRTT"] = 3] = "ZeroRTT";
    Type[Type["VersionNegotiation"] = 4] = "VersionNegotiation";
    Type[Type["Short"] = 5] = "Short";
})(Type || (exports.Type = Type = {}));
/**
 * QUIC transport error codes
 * https://www.rfc-editor.org/rfc/rfc9000#section-20.1
 * Note that `CryptoError` is a range of error codes.
 * Therefore it is not featured in this enum.
 * You can instead fetch it from the constants.
 */
var ConnectionErrorCode;
(function (ConnectionErrorCode) {
    ConnectionErrorCode[ConnectionErrorCode["NoError"] = 0] = "NoError";
    ConnectionErrorCode[ConnectionErrorCode["InternalError"] = 1] = "InternalError";
    ConnectionErrorCode[ConnectionErrorCode["ConnectionRefused"] = 2] = "ConnectionRefused";
    ConnectionErrorCode[ConnectionErrorCode["FlowControlError"] = 3] = "FlowControlError";
    ConnectionErrorCode[ConnectionErrorCode["StreamLimitError"] = 4] = "StreamLimitError";
    ConnectionErrorCode[ConnectionErrorCode["StreamStateError"] = 5] = "StreamStateError";
    ConnectionErrorCode[ConnectionErrorCode["FinalSizeError"] = 6] = "FinalSizeError";
    ConnectionErrorCode[ConnectionErrorCode["FrameEncodingError"] = 7] = "FrameEncodingError";
    ConnectionErrorCode[ConnectionErrorCode["TransportParameterError"] = 8] = "TransportParameterError";
    ConnectionErrorCode[ConnectionErrorCode["ConnectionIdLimitError"] = 9] = "ConnectionIdLimitError";
    ConnectionErrorCode[ConnectionErrorCode["ProtocolViolation"] = 10] = "ProtocolViolation";
    ConnectionErrorCode[ConnectionErrorCode["InvalidToken"] = 11] = "InvalidToken";
    ConnectionErrorCode[ConnectionErrorCode["ApplicationError"] = 12] = "ApplicationError";
    ConnectionErrorCode[ConnectionErrorCode["CryptoBufferExceeded"] = 13] = "CryptoBufferExceeded";
    ConnectionErrorCode[ConnectionErrorCode["KeyUpdateError"] = 14] = "KeyUpdateError";
    ConnectionErrorCode[ConnectionErrorCode["AEADLimitReached"] = 15] = "AEADLimitReached";
    ConnectionErrorCode[ConnectionErrorCode["NoViablePath"] = 16] = "NoViablePath";
})(ConnectionErrorCode || (exports.ConnectionErrorCode = ConnectionErrorCode = {}));
/**
 * CryptoError is a range from `0x100` to `0x01FF`.
 * It maps from the TLS `AlertDescription` codes, offset
 * by `0x100`. These are known codes of TLS 1.3 hardcoded in
 * QUIC RFC 9000.
 * See the TLS 1.3 codes in: https://www.rfc-editor.org/rfc/rfc8446#section-6
 */
var CryptoError;
(function (CryptoError) {
    CryptoError[CryptoError["CloseNotify"] = 256] = "CloseNotify";
    CryptoError[CryptoError["UnexpectedMessage"] = 266] = "UnexpectedMessage";
    CryptoError[CryptoError["BadRecordMac"] = 276] = "BadRecordMac";
    CryptoError[CryptoError["RecordOverflow"] = 278] = "RecordOverflow";
    CryptoError[CryptoError["HandshakeFailure"] = 296] = "HandshakeFailure";
    CryptoError[CryptoError["BadCertificate"] = 298] = "BadCertificate";
    CryptoError[CryptoError["UnsupportedCertificate"] = 299] = "UnsupportedCertificate";
    CryptoError[CryptoError["CertificateRevoked"] = 300] = "CertificateRevoked";
    CryptoError[CryptoError["CertificateExpired"] = 301] = "CertificateExpired";
    CryptoError[CryptoError["CertificateUnknown"] = 302] = "CertificateUnknown";
    CryptoError[CryptoError["IllegalParameter"] = 303] = "IllegalParameter";
    CryptoError[CryptoError["UnknownCA"] = 304] = "UnknownCA";
    CryptoError[CryptoError["AccessDenied"] = 305] = "AccessDenied";
    CryptoError[CryptoError["DecodeError"] = 306] = "DecodeError";
    CryptoError[CryptoError["DecryptError"] = 307] = "DecryptError";
    CryptoError[CryptoError["ProtocolVersion"] = 326] = "ProtocolVersion";
    CryptoError[CryptoError["InsufficientSecurity"] = 327] = "InsufficientSecurity";
    CryptoError[CryptoError["InternalError"] = 336] = "InternalError";
    CryptoError[CryptoError["InappropriateFallback"] = 342] = "InappropriateFallback";
    CryptoError[CryptoError["UserCanceled"] = 346] = "UserCanceled";
    CryptoError[CryptoError["MissingExtension"] = 365] = "MissingExtension";
    CryptoError[CryptoError["UnsupportedExtension"] = 366] = "UnsupportedExtension";
    CryptoError[CryptoError["UnrecognizedName"] = 368] = "UnrecognizedName";
    CryptoError[CryptoError["BadCertificateStatusResponse"] = 369] = "BadCertificateStatusResponse";
    CryptoError[CryptoError["UnknownPSKIdentity"] = 371] = "UnknownPSKIdentity";
    CryptoError[CryptoError["CertificateRequired"] = 372] = "CertificateRequired";
    CryptoError[CryptoError["NoApplicationProtocol"] = 376] = "NoApplicationProtocol";
})(CryptoError || (exports.CryptoError = CryptoError = {}));
//# sourceMappingURL=types.js.map
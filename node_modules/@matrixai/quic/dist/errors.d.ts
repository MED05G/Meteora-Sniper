import type { POJO } from '@matrixai/errors';
import type { ConnectionError, CryptoError } from './native';
import AbstractError from '@matrixai/errors/dist/AbstractError';
declare class ErrorQUIC<T> extends AbstractError<T> {
    static description: string;
}
declare class ErrorQUICUndefinedBehaviour<T> extends AbstractError<T> {
    static description: string;
}
declare class ErrorQUICHostInvalid<T> extends AbstractError<T> {
    static description: string;
}
declare class ErrorQUICPortInvalid<T> extends AbstractError<T> {
    static description: string;
}
declare class ErrorQUICConfig<T> extends ErrorQUIC<T> {
    static description: string;
}
declare class ErrorQUICSocket<T> extends ErrorQUIC<T> {
    static description: string;
}
declare class ErrorQUICSocketNotRunning<T> extends ErrorQUICSocket<T> {
    static description: string;
}
declare class ErrorQUICSocketConnectionsActive<T> extends ErrorQUICSocket<T> {
    static description: string;
}
declare class ErrorQUICSocketInvalidBindAddress<T> extends ErrorQUICSocket<T> {
    static description: string;
}
declare class ErrorQUICSocketInvalidSendAddress<T> extends ErrorQUICSocket<T> {
    static description: string;
}
declare class ErrorQUICSocketInternal<T> extends ErrorQUICSocket<T> {
    static description: string;
}
declare class ErrorQUICClient<T> extends ErrorQUIC<T> {
    static description: string;
}
declare class ErrorQUICClientDestroyed<T> extends ErrorQUICClient<T> {
    static description: string;
}
declare class ErrorQUICClientCreateTimeout<T> extends ErrorQUICClient<T> {
    static description: string;
}
declare class ErrorQUICClientSocketNotRunning<T> extends ErrorQUICClient<T> {
    static description: string;
}
declare class ErrorQUICClientInvalidArgument<T> extends ErrorQUICClient<T> {
    static description: string;
}
declare class ErrorQUICClientInvalidHost<T> extends ErrorQUICClient<T> {
    static description: string;
}
declare class ErrorQUICClientInternal<T> extends ErrorQUICClient<T> {
    static description: string;
}
declare class ErrorQUICServer<T> extends ErrorQUIC<T> {
    static description: string;
}
declare class ErrorQUICServerNotRunning<T> extends ErrorQUICServer<T> {
    static description: string;
}
declare class ErrorQUICServerSocketNotRunning<T> extends ErrorQUICServer<T> {
    static description: string;
}
declare class ErrorQUICServerNewConnection<T> extends ErrorQUICServer<T> {
    static description: string;
}
declare class ErrorQUICServerInternal<T> extends ErrorQUICServer<T> {
    static description: string;
}
declare class ErrorQUICServerStopping<T> extends ErrorQUICServer<T> {
    static description: string;
}
declare class ErrorQUICConnection<T> extends ErrorQUIC<T> {
    static description: string;
}
declare class ErrorQUICConnectionStopping<T> extends ErrorQUICConnection<T> {
    static description: string;
}
declare class ErrorQUICConnectionNotRunning<T> extends ErrorQUICConnection<T> {
    static description: string;
}
declare class ErrorQUICConnectionClosed<T> extends ErrorQUICConnection<T> {
    static description: string;
}
declare class ErrorQUICConnectionStartData<T> extends ErrorQUIC<T> {
    static description: string;
}
declare class ErrorQUICConnectionStartTimeout<T> extends ErrorQUICConnection<T> {
    static description: string;
}
declare class ErrorQUICConnectionConfigInvalid<T> extends ErrorQUICConnection<T> {
    static description: string;
}
declare class ErrorQUICConnectionLocal<T> extends ErrorQUICConnection<T> {
    static description: string;
    data: POJO & ConnectionError;
    constructor(message: string | undefined, options: {
        timestamp?: Date;
        data: POJO & ConnectionError;
        cause?: T;
    });
}
declare class ErrorQUICConnectionLocalTLS<T> extends ErrorQUICConnectionLocal<T> {
    static description: string;
    data: POJO & ConnectionError & {
        errorCode: CryptoError;
    };
    constructor(message: string | undefined, options: {
        timestamp?: Date;
        data: POJO & ConnectionError & {
            errorCode: CryptoError;
        };
        cause?: T;
    });
}
declare class ErrorQUICConnectionPeer<T> extends ErrorQUICConnection<T> {
    static description: string;
    data: POJO & ConnectionError;
    constructor(message: string | undefined, options: {
        timestamp?: Date;
        data: POJO & ConnectionError;
        cause?: T;
    });
}
declare class ErrorQUICConnectionPeerTLS<T> extends ErrorQUICConnectionLocal<T> {
    static description: string;
    data: POJO & ConnectionError & {
        errorCode: CryptoError;
    };
    constructor(message: string | undefined, options: {
        timestamp?: Date;
        data: POJO & ConnectionError & {
            errorCode: CryptoError;
        };
        cause?: T;
    });
}
declare class ErrorQUICConnectionIdleTimeout<T> extends ErrorQUICConnection<T> {
    static description: string;
}
declare class ErrorQUICConnectionInternal<T> extends ErrorQUICConnection<T> {
    static description: string;
}
declare class ErrorQUICStream<T> extends ErrorQUIC<T> {
    static description: string;
}
declare class ErrorQUICStreamDestroyed<T> extends ErrorQUICStream<T> {
    static description: string;
}
declare class ErrorQUICStreamLocalRead<T> extends ErrorQUICStream<T> {
    static description: string;
    data: POJO & {
        code: number;
    };
    constructor(message: string | undefined, options: {
        timestamp?: Date;
        data: POJO & {
            code: number;
        };
        cause?: T;
    });
}
declare class ErrorQUICStreamLocalWrite<T> extends ErrorQUICStream<T> {
    static description: string;
    data: POJO & {
        code: number;
    };
    constructor(message: string | undefined, options: {
        timestamp?: Date;
        data: POJO & {
            code: number;
        };
        cause?: T;
    });
}
declare class ErrorQUICStreamPeerRead<T> extends ErrorQUICStream<T> {
    static description: string;
    data: POJO & {
        code: number;
    };
    constructor(message: string | undefined, options: {
        timestamp?: Date;
        data: POJO & {
            code: number;
        };
        cause?: T;
    });
}
declare class ErrorQUICStreamPeerWrite<T> extends ErrorQUICStream<T> {
    static description: string;
    data: POJO & {
        code: number;
    };
    constructor(message: string | undefined, options: {
        timestamp?: Date;
        data: POJO & {
            code: number;
        };
        cause?: T;
    });
}
declare class ErrorQUICStreamInternal<T> extends ErrorQUICStream<T> {
    static description: string;
}
declare class ErrorQUICStreamLimit<T> extends ErrorQUICStream<T> {
    static description: string;
}
export { ErrorQUIC, ErrorQUICUndefinedBehaviour, ErrorQUICHostInvalid, ErrorQUICPortInvalid, ErrorQUICConfig, ErrorQUICSocket, ErrorQUICSocketNotRunning, ErrorQUICSocketConnectionsActive, ErrorQUICSocketInvalidBindAddress, ErrorQUICSocketInvalidSendAddress, ErrorQUICSocketInternal, ErrorQUICClient, ErrorQUICClientDestroyed, ErrorQUICClientCreateTimeout, ErrorQUICClientSocketNotRunning, ErrorQUICClientInvalidArgument, ErrorQUICClientInvalidHost, ErrorQUICClientInternal, ErrorQUICServer, ErrorQUICServerNotRunning, ErrorQUICServerSocketNotRunning, ErrorQUICServerNewConnection, ErrorQUICServerInternal, ErrorQUICServerStopping, ErrorQUICConnection, ErrorQUICConnectionStopping, ErrorQUICConnectionNotRunning, ErrorQUICConnectionClosed, ErrorQUICConnectionStartData, ErrorQUICConnectionStartTimeout, ErrorQUICConnectionConfigInvalid, ErrorQUICConnectionLocal, ErrorQUICConnectionLocalTLS, ErrorQUICConnectionPeer, ErrorQUICConnectionPeerTLS, ErrorQUICConnectionIdleTimeout, ErrorQUICConnectionInternal, ErrorQUICStream, ErrorQUICStreamDestroyed, ErrorQUICStreamLocalRead, ErrorQUICStreamLocalWrite, ErrorQUICStreamPeerRead, ErrorQUICStreamPeerWrite, ErrorQUICStreamInternal, ErrorQUICStreamLimit, };
